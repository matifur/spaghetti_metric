[
    {
        "Date and Time": "2024-12-05T11:40:48.801676",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:40:52.514001",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.449",
        "Chat GPT 3.5-turbo output": "2.449",
        "Llama 3.1-70B Ins output": "2.449",
        "Llama 3.1-8B output": "2.0",
        "Chat GPT 4o output": "2.449",
        "Chat GPT 4o mini output": "2.449",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:40:55.679962",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 7\nvalue_2 = 5\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "12",
        "Chat GPT 3.5-turbo output": "12",
        "Llama 3.1-70B Ins output": "12",
        "Llama 3.1-8B output": "12",
        "Chat GPT 4o output": "12",
        "Chat GPT 4o mini output": "12",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:40:58.684064",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:04.758045",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:07.626169",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:10.798862",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "50.24",
        "Chat GPT 3.5-turbo output": "50.24",
        "Llama 3.1-70B Ins output": "50.24",
        "Llama 3.1-8B output": "51.26",
        "Chat GPT 4o output": "50.24",
        "Chat GPT 4o mini output": "50.24",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:13.660220",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 4\nvalue_2 = 2\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "16",
        "Chat GPT 3.5-turbo output": "16",
        "Llama 3.1-70B Ins output": "256",
        "Llama 3.1-8B output": "512",
        "Chat GPT 4o output": "16",
        "Chat GPT 4o mini output": "16",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:16.685548",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.156",
        "Chat GPT 3.5-turbo output": "0.156",
        "Llama 3.1-70B Ins output": "-0.756",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.156",
        "Chat GPT 4o mini output": "0.987",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:19.545179",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:22.716034",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "14",
        "Chat GPT 3.5-turbo output": "14",
        "Llama 3.1-70B Ins output": "14",
        "Llama 3.1-8B output": "33",
        "Chat GPT 4o output": "14",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:26.069107",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 5\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "140",
        "Chat GPT 3.5-turbo output": "4947",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "24.0",
        "Chat GPT 4o output": "15",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:29.392958",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.0",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:32.754670",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.474",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "1.5849",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:35.783731",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.283333333333333",
        "Chat GPT 3.5-turbo output": "3.0",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "1.883",
        "Chat GPT 4o output": "2.283",
        "Chat GPT 4o mini output": "2.283",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:39.734970",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:41:43.433026",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 8\nvalue_2 = 2\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.004",
        "Chat GPT 3.5-turbo output": "1.082",
        "Llama 3.1-70B Ins output": "0.653",
        "Llama 3.1-8B output": "1.121550",
        "Chat GPT 4o output": "1.292",
        "Chat GPT 4o mini output": "1.644",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:46.674398",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.667",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "4.0",
        "Chat GPT 4o mini output": "3.141",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:49.913850",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 1\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "24",
        "Chat GPT 3.5-turbo output": "176",
        "Llama 3.1-70B Ins output": "24",
        "Llama 3.1-8B output": "24",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:52.923228",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "-0.179",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "-0.368",
        "Chat GPT 4o mini output": "0.500",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:41:56.178590",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.76",
        "Chat GPT 3.5-turbo output": "1.386",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "4.330264669084878",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.945910",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:42:02.638149",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.717",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "20.0678",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.718281828",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:42:05.598550",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 4\nvalue_2 = 9\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "84",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:42:08.536835",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 2\nvalue_2 = 8\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "56",
        "Chat GPT 3.5-turbo output": "128",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "-8",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "24",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:42:11.686091",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-05T11:42:14.776888",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.829",
        "Chat GPT 3.5-turbo output": "2.828",
        "Llama 3.1-70B Ins output": "2.928",
        "Llama 3.1-8B output": "2.9898932128069387",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:42:18.025126",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 6\nvalue_2 = 4\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "115.0",
        "Chat GPT 3.5-turbo output": "13",
        "Llama 3.1-70B Ins output": "4026.370",
        "Llama 3.1-8B output": "72.0",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "403.0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-05T11:42:20.879949",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "18",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:06:50.098769",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "25",
        "Chat GPT 3.5-turbo output": "25",
        "Llama 3.1-70B Ins output": "25",
        "Llama 3.1-8B output": "125",
        "Chat GPT 4o output": "25",
        "Chat GPT 4o mini output": "25",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:07:04.978840",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:07:08.858291",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 4\nvalue_2 = 6\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:07:11.886193",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:07:27.201772",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "720",
        "Chat GPT 3.5-turbo output": "720",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "720",
        "Chat GPT 4o mini output": "720",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:07:42.212033",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:07:58.107686",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "28.26",
        "Chat GPT 3.5-turbo output": "28.26",
        "Llama 3.1-70B Ins output": "28.26",
        "Llama 3.1-8B output": "28.26",
        "Chat GPT 4o output": "28.26",
        "Chat GPT 4o mini output": "28.26",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:08:17.520577",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 1\nvalue_2 = 1\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:08:20.835623",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.017",
        "Chat GPT 3.5-turbo output": "0.017",
        "Llama 3.1-70B Ins output": "0.841",
        "Llama 3.1-8B output": "0.1745329",
        "Chat GPT 4o output": "0.017",
        "Chat GPT 4o mini output": "0.841",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:08:36.318471",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:09:05.164542",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "42",
        "Chat GPT 3.5-turbo output": "42",
        "Llama 3.1-70B Ins output": "Catalan number C(5):\n\n calc (14 * 13 * 12 * 11 * 10) / (6 * 5 * 4 * 3 * 2)\n\n\n(14 * 13 * 12 * 11 * 10) = 240240 \n/(6 * 5 * 4 * 3 * 2)\n\n\n(6 * 5 * 4 * 3 * 2) = 720 \n\n calc (14 * 13 * 12 * 11 * 10) / (6 * 5 * 4 * 3 * 2) \n\n\n(14 * 13 * 12 * 11 * 10) / (6 * 5 * 4 * 3 * 2) = calc ( 240240 / 720) \n\ncalc ( 240240 / 720) = 333.333 \n\n\n333.333 calc (round( 333.333, 3))\n\n\nround( 333.333, 3) = 333.333\n\n\nThe Answer:\n333.333",
        "Llama 3.1-8B output": "42",
        "Chat GPT 4o output": "42",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:09:27.717822",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 9\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "6951",
        "Chat GPT 3.5-turbo output": "1103",
        "Llama 3.1-70B Ins output": "20882706430",
        "Llama 3.1-8B output": "54",
        "Chat GPT 4o output": "16",
        "Chat GPT 4o mini output": "126",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:09:56.054485",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.5",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "-0.500",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:10:03.534586",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.401",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:10:10.347312",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.592857142857143",
        "Chat GPT 3.5-turbo output": "2.717647",
        "Llama 3.1-70B Ins output": "7.0.",
        "Llama 3.1-8B output": "2.085811077040063",
        "Chat GPT 4o output": "2.593",
        "Chat GPT 4o mini output": "2.593",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:10:26.538707",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:10:41.803348",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 4\nvalue_2 = 8\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.082",
        "Chat GPT 3.5-turbo output": "1.083",
        "Llama 3.1-70B Ins output": "1.082",
        "Llama 3.1-8B output": "1.108326",
        "Chat GPT 4o output": "1.082",
        "Chat GPT 4o mini output": "1.008349277",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:10:56.759687",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.252",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.183",
        "Chat GPT 4o mini output": "3.141",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:11:11.780269",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 4\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "14",
        "Llama 3.1-70B Ins output": "73",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "24",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:11:15.768038",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.0",
        "Chat GPT 3.5-turbo output": "-0.333",
        "Llama 3.1-70B Ins output": "0.548",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.333",
        "Chat GPT 4o mini output": "0.366",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:11:21.478013",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.746",
        "Chat GPT 3.5-turbo output": "2.564",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "4.605",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "2.197222",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:11:27.116715",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.708",
        "Chat GPT 3.5-turbo output": "2.708",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "20.0857",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.708",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:11:31.592669",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 2\nvalue_2 = 6\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "15",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "15",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:11:35.840129",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "210",
        "Chat GPT 3.5-turbo output": "5045",
        "Llama 3.1-70B Ins output": "27000.0",
        "Llama 3.1-8B output": "42",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "720",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:12:11.533728",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 5\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.143",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "def dyn_power(base, n):\n    return dyn_power(base, n dyn_power(base dyn_power(base, n - 1) dyn_power(base, n dyn_power(base, n - dyn_power(base, n dyn_power(base, n dyn_power(base, n dyn_power(base, n - dyn_power(base, n, if n == 0 dyn_power dyn_power(base dyn_power(base, n dyn_power(base, n dyn_power(base, n - dyn_power(base, n, n dyn_power(base, n - dyn_power(base, n, if n == 0 0ATt the solution dyn_power(base dyn_power(base, n dyn_power(base, n, dyn_power(base, n, dyn_power(base, n - dyn_power(base, n, if n == dyn_power(base, n - dyn_power dyn_power dyn_power(base, n - dyn_power(base, n, if n == dyndyn_power dynATt the solution dyn_power dyn_power dyn_power(base dyn_power dyn_power(base, n - dyn_power dyn_power(base, n dyn_power(base, n dyn_power(base, n dyn_power(base dyn_power(base, n - dyn_power(base, n, if n == dyndyn_power dynATt the solution dyn_power dyn_power dyn_power(base dyn_power(base, dyn_power(base dyn_power(base, n - dyn dyn_power(base, dyn_power(base, dyn_power(base dyn_power(base, n, dyn_power(basedyn_power(baseATt the solution dyn_power dyn_power dyn_power(base dyn_power(base, dyn_power(base dyn_power(base, n, dyn_power(basedyn_power(baseATt the solution dyn_power dyn_power dyn_power(base dyn_power(base, dyn_power(base dyn_power(base, dyn_power(base, n dyn_power(base, dyn_power(base returning home dyn_power(base, dyn_power dyn_power(base, dyn_power(base returning home, dyn_power(reverse dyn_power(basedyn_power,ATt the solution dyn_power base area dyn_power perse_power literutchatus_item_perse_powerCom_status dyn_status dyn_status dyn_power natives dyn_status_flicationcastatus_perse,_status dyn_power natives dyn_status_status dyn_power natives dyn_status_status dyn_power natives dyn_status dyn_power natives dyn_status_status dyn_power natives dyn_status_status dyn_power natives dyn_status_status dyn_power natives dyn_status_flicationcastatus_perse,(reverse dyn_power nativesdyn_status dynATt the solution dyn_power base area dyn_status perse_power literutchatus_item_perse_powerCom_status natives dyn_status wife, \n",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.2",
        "Chat GPT 4o mini output": "3.14159",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:12:26.340576",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.593",
        "Chat GPT 3.5-turbo output": "2.717",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "3.549",
        "Chat GPT 4o output": "2.593",
        "Chat GPT 4o mini output": "2.593",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:12:41.237999",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 5\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "18.4",
        "Chat GPT 3.5-turbo output": "147.0",
        "Llama 3.1-70B Ins output": "20.086",
        "Llama 3.1-8B output": "47.123",
        "Chat GPT 4o output": "8.067",
        "Chat GPT 4o mini output": "12",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:12:45.570541",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:12:48.610401",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4.0",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:12:54.026085",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.449",
        "Chat GPT 3.5-turbo output": "2.449",
        "Llama 3.1-70B Ins output": "2.449",
        "Llama 3.1-8B output": "1.581",
        "Chat GPT 4o output": "2.449",
        "Chat GPT 4o mini output": "2.449",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:12:56.551093",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 4\nvalue_2 = 6\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:13:11.474224",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:13:26.772405",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "5040",
        "Chat GPT 4o mini output": "5040",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:13:30.943669",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "`True`",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:13:36.912176",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "200.96",
        "Chat GPT 3.5-turbo output": "201.12",
        "Llama 3.1-70B Ins output": "201.066",
        "Llama 3.1-8B output": "201.07",
        "Chat GPT 4o output": "200.96",
        "Chat GPT 4o mini output": "201.06",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:13:55.816096",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 8\nvalue_2 = 5\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "32768",
        "Chat GPT 3.5-turbo output": "32768",
        "Llama 3.1-70B Ins output": "There's a syntax error in the given code. 'value_1' is not defined and 'value_8' is defined but the correct syntax would be 'value_1 = 8'. \n\nLet's correct that.\n\nvalue_1 = 8 \nvalue_2 = 5\n\nThen this will be the output: \n\n8",
        "Llama 3.1-8B output": "512",
        "Chat GPT 4o output": "32",
        "Chat GPT 4o mini output": "32768",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:13:58.667968",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.052",
        "Chat GPT 3.5-turbo output": "-0.141",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.052",
        "Chat GPT 4o mini output": "0.142",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:14:01.432059",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:14:12.084836",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:14:27.720197",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "301",
        "Chat GPT 3.5-turbo output": "3016",
        "Llama 3.1-70B Ins output": "297",
        "Llama 3.1-8B output": "35",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:14:42.945306",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "0.5",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "-0.033",
        "Chat GPT 4o mini output": "-0.033",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:14:47.164548",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.513",
        "Chat GPT 3.5-turbo output": "1.79",
        "Llama 3.1-70B Ins output": "0.57721566490153286060651209",
        "Llama 3.1-8B output": "1.5811392859738803",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:14:53.232705",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.8333333333333333",
        "Chat GPT 3.5-turbo output": "1.833",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "2.333",
        "Chat GPT 4o output": "1.8333333333333333",
        "Chat GPT 4o mini output": "2.083",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:14:56.065478",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "13",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:15:11.777174",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 7\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.002",
        "Chat GPT 3.5-turbo output": "1.838",
        "Llama 3.1-70B Ins output": "None",
        "Llama 3.1-8B output": "1.085",
        "Chat GPT 4o output": "1.009",
        "Chat GPT 4o mini output": "1.007977",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:15:26.953557",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.017",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.283",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:15:49.463181",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 2\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "109584",
        "Chat GPT 3.5-turbo output": "384.0",
        "Llama 3.1-70B Ins output": "1937102445",
        "Llama 3.1-8B output": "24.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:16:04.483099",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "-0.5",
        "Chat GPT 4o mini output": "0.166",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:16:33.265326",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.76",
        "Chat GPT 3.5-turbo output": "2.565",
        "Llama 3.1-70B Ins output": "0.3068528194400547",
        "Llama 3.1-8B output": "4.118",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.9459101",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:16:48.761897",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.708",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "15.925 \n\n(Note: The program calculates the 5th term of the series approximation to Euler's number e, resulting in approximately 15.925)",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.716",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:16:53.884252",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 1\nvalue_2 = 6\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "20",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "20",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:16:57.227346",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 8\nvalue_2 = 7\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "40320",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "7",
        "Chat GPT 4o output": "40320",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:17:12.816922",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 8\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.141",
        "Chat GPT 3.5-turbo output": "3.14",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.146",
        "Chat GPT 4o mini output": "3.14",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:17:33.226628",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.5",
        "Chat GPT 3.5-turbo output": "1.5",
        "Llama 3.1-70B Ins output": "1.083",
        "Llama 3.1-8B output": "1.585",
        "Chat GPT 4o output": "1.5",
        "Chat GPT 4o mini output": "2.0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:17:49.247320",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 3\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "13.0",
        "Chat GPT 3.5-turbo output": "20",
        "Llama 3.1-70B Ins output": "20.099",
        "Llama 3.1-8B output": "20.0",
        "Chat GPT 4o output": "7.0",
        "Chat GPT 4o mini output": "20",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:17:57.338352",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:34:17.539838",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9.0",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:34:24.800005",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "```\nNameError: name 'quare_root' is not defined\n```",
        "Llama 3.1-8B output": "2.828",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.646",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:34:40.156527",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 2\nvalue_2 = 1\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:34:55.085468",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:34:58.656383",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "39424",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:35:13.764975",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:35:22.933779",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "50.24",
        "Chat GPT 3.5-turbo output": "50.24",
        "Llama 3.1-70B Ins output": "{ attribute error }",
        "Llama 3.1-8B output": "51.264",
        "Chat GPT 4o output": "50.24",
        "Chat GPT 4o mini output": "50.24",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:35:33.734624",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 3\nvalue_2 = 2\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "27",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:36:02.282848",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.087",
        "Chat GPT 3.5-turbo output": "0.707",
        "Llama 3.1-70B Ins output": "0.087156",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.087",
        "Chat GPT 4o mini output": "-0.959",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:36:17.644339",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:36:32.946930",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "42",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "Catalan number C(5):\n\n calc (14 * 13 * 12 * 11 * 10) / (6 * 5 * 4 * 3 * 2)\n\n\n(14 * 13 * 12 * 11 * 10) = 240240 \n/(6 * 5 * 4 * 3 * 2)\n\n\n(6 * 5 * 4 * 3 * 2) = 720 \n\n calc (14 * 13 * 12 * 11 * 10) / (6 * 5 * 4 * 3 * 2) \n\n\n(14 * 13 * 12 * 11 * 10) / (6 * 5 * 4 * 3 * 2) = calc ( 240240 / 720) \n\ncalc ( 240240 / 720) = 333.333 \n\n\n333.333 calc (round( 333.333, 3))\n\n\nround( 333.333, 3) = 333.333\n\n\nThe Answer:\n333.333",
        "Llama 3.1-8B output": "153",
        "Chat GPT 4o output": "42",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:36:40.515268",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 6\nvalue_2 = 2\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "31",
        "Chat GPT 3.5-turbo output": "65",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "30",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "31",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:37:02.139186",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.167",
        "Llama 3.1-70B Ins output": "\u7531\u4e8evalue_1\u5728\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5b9a\u4e49\uff0c\u6211\u4eec\u65e0\u6cd5\u6267\u884c\u7a0b\u5e8f\u3002\u8fd9\u662f\u56e0\u4e3avalue_1\u6ca1\u6709\u88ab\u5b9a\u4e49\u4e3a\u4efb\u4f55\u503c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e5f\u65e0\u6cd5\u5f97\u51fa\u7a0b\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86value_1\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u3002",
        "Llama 3.1-8B output": "0.1667",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:37:33.948718",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.492",
        "Chat GPT 3.5-turbo output": "1.782",
        "Llama 3.1-70B Ins output": "It seems like the provided code has a couple of issues. The function names are inconsistent (e.g., `_mascheroni` and `euler_mascheroni`). Also, the function `euler_mascheroni` is not defined. Assuming a corrected version of the code where `euler_mascheroni` is replaced with `_mascheroni` and `round_if_float` with `round_if_value`, the corrected code would be:\n\n\n```python\nimport math\n\ndef round_if_value(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_value(gamma)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n```\n\nWith this corrected code, the output would be:\n\n\n0.577",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:37:36.737050",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.592857142857143",
        "Chat GPT 3.5-turbo output": "2.592",
        "Llama 3.1-70B Ins output": "7.0.",
        "Llama 3.1-8B output": "2.9387847859089835",
        "Chat GPT 4o output": "2.593",
        "Chat GPT 4o mini output": "2.593",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:37:39.737413",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:37:55.577303",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 7\nvalue_2 = 2\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.008",
        "Chat GPT 3.5-turbo output": "1.799",
        "Llama 3.1-70B Ins output": "```\n1.6449340668482\n```",
        "Llama 3.1-8B output": "1.141",
        "Chat GPT 4o output": "1.873",
        "Chat GPT 4o mini output": "1.6439345666815617",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:38:13.217430",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:38:18.812890",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 5\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "52",
        "Llama 3.1-70B Ins output": "824440",
        "Llama 3.1-8B output": "24",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:38:22.613304",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.024",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "121",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0.3678794412",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:38:47.441559",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.783",
        "Chat GPT 3.5-turbo output": "1.609",
        "Llama 3.1-70B Ins output": "There are several issues with this program.\n\n1. `value_1 = 5` is missing an assignment operator `=` at the beginning.\n\n2. `ln2_taylor` function is not defined in the given program. \n\n3. `math` module is imported, but not used.\n\nHowever, if we consider `ln2_taylor` function is almost the same as the `ln2_taylor_series` or `ln(2)` with some modifications for more accurate results. Here we just assume that `ln2_taylor` function correctly computes the value of ln(2) using taylor series.\n\nAssuming `ln2_taylor` function will be an almost exact taylor series, we can just use `math.log` to get `ln(2)`. Here we just assume `ln2_taylor(5)` is an almost exact taylor series.\n\n```python\nimport math\n\n# Comput an almost exact natural logartithm of 2 \nresult = math.log(2)\n\n# Output of print\n0.693 \n```",
        "Llama 3.1-8B output": "8.688",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "0.693",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:38:51.541970",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.71828",
        "Llama 3.1-8B output": "4.718",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "1.71828",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:38:56.083102",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 1\nvalue_2 = 2\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "\uc774 \ud504\ub85c\uadf8\ub7a8\uc758 \uacb0\uad0f\uac12\uc740: `2`",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:39:32.233650",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 5\nvalue_2 = 5\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "120",
        "Chat GPT 3.5-turbo output": "120",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "100",
        "Chat GPT 4o output": "120",
        "Chat GPT 4o mini output": "120",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:39:35.961460",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.14",
        "Llama 3.1-70B Ins output": "3.141592653589793",
        "Llama 3.1-8B output": "3.140",
        "Chat GPT 4o output": "3.2",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:40:18.812314",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.829",
        "Chat GPT 3.5-turbo output": "2.93",
        "Llama 3.1-70B Ins output": "I can provide the answer after the following correction in the code.\n```python\ndef round_if_float(value):\n    if isinstance(value, float): \n        return round(value, 5)\n\ndef partial_harmonic_sum(n):\n    if n not in [0, 1]:\n        return round_if_float(n / (n-1))\n\nimport math\nvalue_1 = 9\nresult = value_1\nresult = partial_harmonic_sum(result if int(result) not in [0, 1] else value_1)\n```\nAnd the ICD 10 code family for value 1.8 i.e R76 family can have up to 8 i.e R76 family can have up to 8 family member i.e R76.8\n R76 family can have i.e i.e R76 family can i.e R76 family can i.e R76 family can i.e R76  i.e R76 family can have up  i.e R76 family can have up to have  i.e R76  i.e R76  i.e R76  i.e i.e i.e i.e R76 family can have up to  i.e R76  i.e R76  i.e R76  i.e  i.e  i.e i.e  i.e  i.e R76 family can have up to have  family can i.e  i.e R76 family can have up to have  i.e  R76 family can have up to have  family  can i.e R76 family can have up to have  family  can i.e R76 family can i.e R76 family can i.e R76 family can have up to have  family  i.e i.e R76 family can have  i.e R76 family can have up to have  family  have  family  can i.e R76 family can have up to  family  can have i.e i.e R76  i.e R76 family can have up to have  i.e R76 family can have up to have  i.e R76  i.e R76  family can have up to have  i.e R76  i.e R76  family can have up to have  family  have  family  can  i.e R76 family can have up to have  family  i.e R76 family can have up to have  family  have  family  can  i.e R76  i.e",
        "Llama 3.1-8B output": "3.709105",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:40:21.780909",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 1\nvalue_2 = 5\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2.717",
        "Chat GPT 3.5-turbo output": "121.0",
        "Llama 3.1-70B Ins output": "122.122.",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:40:24.472182",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:40:36.113506",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "64",
        "Chat GPT 3.5-turbo output": "64",
        "Llama 3.1-70B Ins output": "12471044536",
        "Llama 3.1-8B output": "64",
        "Chat GPT 4o output": "64",
        "Chat GPT 4o mini output": "64",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:41:16.265860",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.414",
        "Chat GPT 3.5-turbo output": "1.414",
        "Llama 3.1-70B Ins output": "\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d\uff0c\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d\uff0c\u9996\u5148\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d\uff0c\u8868\u793a\u6307\u5b9a\u7a0b\u5e8f\u64e6\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u5728\u6307\u5b9a\u7a0b\u5e8f\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!lab\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d \ud83d\ude42\n\n\u610f\u5473\u7740\u5bf9\u4e8e\u0432\u0430\u0442 Duyuwnguent Tacoma caus []\n\n\u56e0\u4e3a administr\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!lab\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d \ud83d\ude42\n\n\u610f\u5473\u7740\u5bf9\u4e8e\u0432\u0430\u0442 Duyuwnguent Tacoma caus []\n\n\u56e0\u4e3a administr\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u5728\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!lab\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d \ud83d\ude42\n\n\u610f\u5473\u7740\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u5728\u5728\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!lab\u5728\u6307\u5b9a\u7a0b\u5e8f\u4e2d \ud83d\ude42\n\n\u610f\u5473\u7740\u5bf9\u4e8e\u0432\u0430\u0442 Duyuwnguent Tacoma\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u6307\u5b9a\u5728\u5728\u5728\u5728\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***\u5728\u6307\u5b9a\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!***\u5728\u5728\u5728\u5728\u5728\u5728\u5728\u5728\u5728\u67d3\u5728\u6307\u5b9a\u7a0b\u5e8f\u64e6 Dollar ***ricing{!!lab\u5728\u6307\u5b9a",
        "Llama 3.1-8B output": "1.585",
        "Chat GPT 4o output": "1.414",
        "Chat GPT 4o mini output": "1.414",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:41:31.857517",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 3\nvalue_2 = 4\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "7",
        "Chat GPT 3.5-turbo output": "7",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "7.0",
        "Chat GPT 4o output": "7",
        "Chat GPT 4o mini output": "7",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:41:46.688451",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:42:01.322357",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "39424",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:42:03.522719",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "`True`",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:42:07.680903",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.14",
        "Chat GPT 3.5-turbo output": "3.14",
        "Llama 3.1-70B Ins output": "The terminal output will be:\n\n```\n0\n```",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.14",
        "Chat GPT 4o mini output": "3.14",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:42:24.023402",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 6\nvalue_2 = 5\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "7776",
        "Chat GPT 3.5-turbo output": "7776",
        "Llama 3.1-70B Ins output": "60466176",
        "Llama 3.1-8B output": "61",
        "Chat GPT 4o output": "7776",
        "Chat GPT 4o mini output": "7776",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:42:38.927886",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.052",
        "Chat GPT 3.5-turbo output": "0.141",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.052",
        "Chat GPT 4o mini output": "0.141",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:42:54.411882",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "21",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "21",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:43:09.383838",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "132",
        "Chat GPT 3.5-turbo output": "132.",
        "Llama 3.1-70B Ins output": "16652326",
        "Llama 3.1-8B output": "908016",
        "Chat GPT 4o output": "132",
        "Chat GPT 4o mini output": "132 Rom\u00e2nia",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:43:14.975908",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 1\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "125",
        "Llama 3.1-70B Ins output": "18493",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:43:17.821564",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.167",
        "Llama 3.1-70B Ins output": "\u7531\u4e8evalue_1\u5728\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u5b9a\u4e49\uff0c\u6211\u4eec\u65e0\u6cd5\u6267\u884c\u7a0b\u5e8f\u3002\u8fd9\u662f\u56e0\u4e3avalue_1\u6ca1\u6709\u88ab\u5b9a\u4e49\u4e3a\u4efb\u4f55\u503c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e5f\u65e0\u6cd5\u5f97\u51fa\u7a0b\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86value_1\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u3002",
        "Llama 3.1-8B output": "0.333",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:43:31.164932",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.307",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "This program does not define the function `euler_mascheroni` (which is actually defined as `_def_mascheroni` or similar, and it seems to be misspelled in its calling point). Also, it seems the function is supposed to calculate the Euler-Mascheroni constant and its definition seems mostly correct), but does not properly round its result.\n\nHowever, I'm assuming it's actually meant to call the `_def_mascheroni` function, and its actual output would look something like:\n\n0.577",
        "Llama 3.1-8B output": "0.577",
        "Chat GPT 4o output": "0.5",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:43:35.508461",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.45",
        "Chat GPT 3.5-turbo output": "2.45",
        "Llama 3.1-70B Ins output": "2.45",
        "Llama 3.1-8B output": "1.859",
        "Chat GPT 4o output": "2.45",
        "Chat GPT 4o mini output": "2.45",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:43:38.273259",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "34",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:44:08.223342",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 5\nvalue_2 = 3\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.035",
        "Chat GPT 3.5-turbo output": "1.202",
        "Llama 3.1-70B Ins output": "There are several issues with the given code:\n\n1. `riemann_zeta` function is not defined, function defined is `ri_zeta`. However assuming the function defined is `riemann_zeta`.\n2. `round_if_float` function is not defined, function defined is `round_if`.\n3. `value_1` is assigned to `result` after reassignment of `result`.\n\nAssuming `riemann_zeta` function is actually defined as `ri_zeta` and function to round the float number is `round_if`, after correcting the function calling issues. Also I will assume `result` to be using the corrected function calling as shown below. Also function calling issues have been corrected.\n\nHere is corrected code:\n\n```python\nimport math\n\ndef round_if(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\ndef riemann_zeta(n, s):\n    n = max(1, abs(n))\n    s = max(1, abs(s))\n    return round_if(sum(1 / k**s for k in range(1, n + 1)))\n\nvalue_1 = 5\nvalue_2 = 3\n\nresult = value_1\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\n\nprint(result)\n```\n\nWhen I run this code, the output is:\n\n1.549",
        "Llama 3.1-8B output": "1.10314",
        "Chat GPT 4o output": "1.04",
        "Chat GPT 4o mini output": "1.zeta(5) = 1.03693",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:44:10.897737",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.283",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:44:13.837658",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "67284",
        "Chat GPT 3.5-turbo output": "15124",
        "Llama 3.1-70B Ins output": "7.646",
        "Llama 3.1-8B output": "342",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:44:16.654056",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.167",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "2.5",
        "Chat GPT 4o mini output": "0.5",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:44:31.701985",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.5",
        "Chat GPT 3.5-turbo output": "0.693",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "0.693",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "0.693",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:44:40.805806",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.717",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.71828",
        "Llama 3.1-8B output": "3.386",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828459045",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:44:44.562521",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 5\nvalue_2 = 7\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "35",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:44:48.078072",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 1\nvalue_2 = 5\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "120",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "-120",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:44:50.834679",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141592653589793",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:44:55.040806",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.083",
        "Chat GPT 3.5-turbo output": "2.083",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.83928674510",
        "Chat GPT 4o output": "2.083",
        "Chat GPT 4o mini output": "2.083",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-07T10:45:45.035890",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 8\nvalue_2 = 4\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "297.0",
        "Chat GPT 3.5-turbo output": "403.0",
        "Llama 3.1-70B Ins output": "The provided code has a few issues:\n\n- `round_if_float` function is not defined; it should be `round_if` function as defined in the code.\n- `taylor_expansion_exp` function is not defined; it should be `taylor_expansion_exp` is actually renamed to `taylor_expansion_exp` is missing in this code.\n\n- Here's the corrected code.\n\n```python\nimport math\n\ndef round_if(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), max(1, int(abs(x)))\n    x = int(str(x)[0])\n    result = sum((x**i) / math.factorial(i) for i in range(n))\n    return round_if(result)\n\nvalue_1 = 8\nvalue_2 = 4\n\nresult = value_1\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n```\nRunning the above code results in a RecursionError, likely due to missing factorial() call.\n\n- Here's the output of the code if I modify few things. For calculating exponentials with a taylor expansion, we are trying to approximate `e^x`. I also made sure to use the variable x's integer first digit in the expansion. Here is a now error free model to compute the natural exponential function with the Taylor series to 4 terms, for those points\n\n-  print(e^3 or math.exp(3) for comparison ) \n\n```python\nimport math\n\ndef round_if(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\ndef taylor_expansion_exp(x, n):\n    x = int(str(x)[0]) \n    result = sum((x**i) / math.factorial(i) for i in range(n))\n    return round_if(result)\n\nvalue_1 = 8\nvalue_2 = 4\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\nprint(\"4.0 is \", math.e, \"Approx\")\n```\n\n```haskell\n20.094\n2.718",
        "Llama 3.1-8B output": "54.598",
        "Chat GPT 4o output": "9.333",
        "Chat GPT 4o mini output": "2789.0",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-07T10:45:48.054518",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:51:19.269665",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:22.694561",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:25.806163",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 4\nvalue_2 = 5\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:32.325099",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:35.385947",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "40320",
        "Chat GPT 3.5-turbo output": "40320",
        "Llama 3.1-70B Ins output": "360",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "40320",
        "Chat GPT 4o mini output": "40320",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:38.363377",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:41.404181",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "153.86",
        "Chat GPT 3.5-turbo output": "153.86",
        "Llama 3.1-70B Ins output": "153.938",
        "Llama 3.1-8B output": "220.78",
        "Chat GPT 4o output": "153.86",
        "Chat GPT 4o mini output": "153.86",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:44.442666",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 7\nvalue_2 = 6\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "117649",
        "Chat GPT 3.5-turbo output": "2401",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "43",
        "Chat GPT 4o output": "117649",
        "Chat GPT 4o mini output": "729",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:51:48.019599",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.052",
        "Chat GPT 3.5-turbo output": "0.141",
        "Llama 3.1-70B Ins output": "0.141",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.052",
        "Chat GPT 4o mini output": "0.141",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:51:51.003603",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "13",
        "Chat GPT 3.5-turbo output": "13",
        "Llama 3.1-70B Ins output": "13",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "13",
        "Chat GPT 4o mini output": "13",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:53.965908",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "2",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:51:57.588107",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 1\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "88",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "11",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:52:00.542023",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "-279251/840",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:52:03.693067",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.447",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.832",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:07.312264",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.45",
        "Chat GPT 3.5-turbo output": "2.44957",
        "Llama 3.1-70B Ins output": "2.5",
        "Llama 3.1-8B output": "1.884",
        "Chat GPT 4o output": "2.45",
        "Chat GPT 4o mini output": "2.450 \u062f\u0647\u06cc\u062f",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:10.366906",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:52:13.536988",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 1\nvalue_2 = 3\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.361",
        "Chat GPT 3.5-turbo output": "1.202",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.000",
        "Chat GPT 4o output": "1.644",
        "Chat GPT 4o mini output": "1.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:16.804855",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.252",
        "Chat GPT 3.5-turbo output": "3.141592",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:20.089583",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "6769",
        "Chat GPT 3.5-turbo output": "1134",
        "Llama 3.1-70B Ins output": "45",
        "Llama 3.1-8B output": "9.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:26.306876",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "5.006",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "0.5",
        "Chat GPT 4o mini output": "1.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:29.373274",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.746",
        "Chat GPT 3.5-turbo output": "2.772",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "4.189783228\u03c6\u03bf\u03c1\u03ac",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "2.197222",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:32.411945",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.0",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "7.389",
        "Chat GPT 4o output": "2.667",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:35.370121",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 8\nvalue_2 = 7\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "28",
        "Chat GPT 4o output": "56",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:38.673741",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 2\nvalue_2 = 4\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "12",
        "Chat GPT 3.5-turbo output": "24",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "-8",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:42.580741",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 1\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.167",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.0",
        "Chat GPT 4o mini output": "3.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:45.681163",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "2.717",
        "Llama 3.1-70B Ins output": "2.717",
        "Llama 3.1-8B output": "2.925",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.717",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:52:48.730131",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 4\nvalue_2 = 2\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "13.0",
        "Chat GPT 3.5-turbo output": "54.0",
        "Llama 3.1-70B Ins output": "65.0",
        "Llama 3.1-8B output": "54.604",
        "Chat GPT 4o output": "7.0",
        "Chat GPT 4o mini output": "16.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:51.989942",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:52:54.828812",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:52:57.934475",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.414",
        "Chat GPT 3.5-turbo output": "1.414",
        "Llama 3.1-70B Ins output": "1.414",
        "Llama 3.1-8B output": "1.585",
        "Chat GPT 4o output": "1.414",
        "Chat GPT 4o mini output": "1.414",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:00.968780",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 4\nvalue_2 = 7\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "11",
        "Chat GPT 3.5-turbo output": "11",
        "Llama 3.1-70B Ins output": "11",
        "Llama 3.1-8B output": "11.0",
        "Chat GPT 4o output": "11",
        "Chat GPT 4o mini output": "11",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:03.892531",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:08.028023",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "No value will be printed. An overflow will occur and the program will terminate due to the too large of an entering value in the math.factorial() function",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:10.903142",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:14.003212",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "254.34",
        "Chat GPT 3.5-turbo output": "254",
        "Llama 3.1-70B Ins output": "28.26",
        "Llama 3.1-8B output": "80.291",
        "Chat GPT 4o output": "254.34",
        "Chat GPT 4o mini output": "254.34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:17.052276",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 7\nvalue_2 = 7\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "823543",
        "Chat GPT 3.5-turbo output": "2401",
        "Llama 3.1-70B Ins output": "710000000",
        "Llama 3.1-8B output": "49",
        "Chat GPT 4o output": "7",
        "Chat GPT 4o mini output": "49",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:19.908306",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.052",
        "Chat GPT 3.5-turbo output": "0.141",
        "Llama 3.1-70B Ins output": "0.141",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.052",
        "Chat GPT 4o mini output": "0.142",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:22.582941",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:25.744694",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "429",
        "Chat GPT 3.5-turbo output": "4298",
        "Llama 3.1-70B Ins output": "432",
        "Llama 3.1-8B output": "24310",
        "Chat GPT 4o output": "429",
        "Chat GPT 4o mini output": "429",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:28.802231",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 6\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2646",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "13456",
        "Llama 3.1-8B output": "135",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:32.025598",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "1.5",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "0.666",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:35.218354",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.492",
        "Chat GPT 3.5-turbo output": "1.785",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.222",
        "Chat GPT 4o output": "0.52",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:38.684890",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.8333333333333333",
        "Chat GPT 3.5-turbo output": "1.833",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "2.1600333373406565",
        "Chat GPT 4o output": "2.833333333333333",
        "Chat GPT 4o mini output": "2.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:41.755516",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:53:44.795792",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 7\nvalue_2 = 5\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.008",
        "Chat GPT 3.5-turbo output": "1.037",
        "Llama 3.1-70B Ins output": "1.077",
        "Llama 3.1-8B output": "1.047",
        "Chat GPT 4o output": "1.008",
        "Chat GPT 4o mini output": "1.03693",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:48.647868",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.467",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:52.123680",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 5\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "22449",
        "Chat GPT 3.5-turbo output": "1516",
        "Llama 3.1-70B Ins output": "The terminal will print: 88179",
        "Llama 3.1-8B output": "12150",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:56.115082",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "230.641",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0.36787944117144233",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:53:59.386554",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.583",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "0.693",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:02.462716",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.717",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "3.364",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:05.678040",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 1\nvalue_2 = 2\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:08.517827",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 9\nvalue_2 = 6\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "362880",
        "Chat GPT 3.5-turbo output": "1088640",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "-18",
        "Chat GPT 4o output": "362880",
        "Chat GPT 4o mini output": "720",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:11.745862",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.2",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:15.180259",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.833",
        "Chat GPT 3.5-turbo output": "2.083",
        "Llama 3.1-70B Ins output": "1.833",
        "Llama 3.1-8B output": "3.292",
        "Chat GPT 4o output": "1.833",
        "Chat GPT 4o mini output": "2.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:18.423098",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 2\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "50.5",
        "Chat GPT 3.5-turbo output": "78",
        "Llama 3.1-70B Ins output": "474267.073",
        "Llama 3.1-8B output": "20.0857",
        "Chat GPT 4o output": "13.0",
        "Chat GPT 4o mini output": "403.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:21.145702",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:23.846763",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:26.501483",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "2.646",
        "Llama 3.1-8B output": "2.0",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.645",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:29.446321",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 6\nvalue_2 = 4\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:32.278359",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:34.642707",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "No value will be printed. An overflow will occur and the program will terminate due to the too large of an entering value in the math.factorial() function",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:37.449418",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:40.570384",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "50.24",
        "Chat GPT 3.5-turbo output": "50.24",
        "Llama 3.1-70B Ins output": "52.8",
        "Llama 3.1-8B output": "16.0",
        "Chat GPT 4o output": "50.24",
        "Chat GPT 4o mini output": "50.24",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:43.904788",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 8\nvalue_2 = 9\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "134217728",
        "Chat GPT 3.5-turbo output": "16",
        "Llama 3.1-70B Ins output": "87500",
        "Llama 3.1-8B output": "729",
        "Chat GPT 4o output": "512",
        "Chat GPT 4o mini output": "512",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:47.178134",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.017",
        "Chat GPT 3.5-turbo output": "0.017",
        "Llama 3.1-70B Ins output": "0.841",
        "Llama 3.1-8B output": "0.841",
        "Chat GPT 4o output": "0.017",
        "Chat GPT 4o mini output": "0.841",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:50.337269",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:53.295046",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "429",
        "Chat GPT 3.5-turbo output": "429.0",
        "Llama 3.1-70B Ins output": "432",
        "Llama 3.1-8B output": "49896000",
        "Chat GPT 4o output": "429",
        "Chat GPT 4o mini output": "429",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:54:56.275893",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 9\nvalue_2 = 1\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "362880",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:54:59.184723",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.015",
        "Llama 3.1-70B Ins output": "1/2",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:55:02.277016",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.513",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "5.1683",
        "Chat GPT 4o output": "0.5772156649",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:08.599997",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.592857142857143",
        "Chat GPT 3.5-turbo output": "2.592",
        "Llama 3.1-70B Ins output": "2.717",
        "Llama 3.1-8B output": "6.057",
        "Chat GPT 4o output": "2.593",
        "Chat GPT 4o mini output": "2.593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:55:11.806788",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1\n1\n1\n2\n3\n5\n8\n13",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:55:15.202467",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 1\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "1.091929646345683",
        "Chat GPT 4o output": "1.286",
        "Chat GPT 4o mini output": "1.0000000000000002",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:55:24.059642",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.252",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:26.578789",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "35",
        "Chat GPT 3.5-turbo output": "61",
        "Llama 3.1-70B Ins output": "25",
        "Llama 3.1-8B output": "62",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "60",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:29.399901",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "230.641",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.368",
        "Chat GPT 4o mini output": "0.36787944117144233",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:32.334723",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.833",
        "Chat GPT 3.5-turbo output": "0.693",
        "Llama 3.1-70B Ins output": "0.519",
        "Llama 3.1-8B output": "5.497",
        "Chat GPT 4o output": "0.694",
        "Chat GPT 4o mini output": "1.0986122886681098",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:35.426613",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.667",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "10.873",
        "Llama 3.1-8B output": "5.718",
        "Chat GPT 4o output": "2.667",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:38.595769",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 4\nvalue_2 = 7\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "35",
        "Llama 3.1-8B output": "35",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:55:41.354537",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 7\nvalue_2 = 4\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "24",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "-28",
        "Chat GPT 4o output": "1680",
        "Chat GPT 4o mini output": "24",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:44.368832",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 4\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.14",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:51.854360",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "2.717",
        "Llama 3.1-70B Ins output": "2.717",
        "Llama 3.1-8B output": "2.612",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.717",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:55:54.977872",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 6\nvalue_2 = 6\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "244.6",
        "Chat GPT 3.5-turbo output": "720",
        "Llama 3.1-70B Ins output": "6673.237",
        "Llama 3.1-8B output": "19.718",
        "Chat GPT 4o output": "6.667",
        "Chat GPT 4o mini output": "403.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:55:57.979120",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:59:13.209755",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "49",
        "Chat GPT 3.5-turbo output": "49.0",
        "Llama 3.1-70B Ins output": "49",
        "Llama 3.1-8B output": "49",
        "Chat GPT 4o output": "49",
        "Chat GPT 4o mini output": "49",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:16.666712",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.732",
        "Chat GPT 3.5-turbo output": "1.732",
        "Llama 3.1-70B Ins output": "1.732",
        "Llama 3.1-8B output": "1.581",
        "Chat GPT 4o output": "1.732",
        "Chat GPT 4o mini output": "1.732",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:20.404701",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 6\nvalue_2 = 4\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "6.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:24.549327",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "2",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:27.752997",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:30.740911",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:59:33.650024",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "153.86",
        "Chat GPT 3.5-turbo output": "153.86",
        "Llama 3.1-70B Ins output": "153.938",
        "Llama 3.1-8B output": "220.79",
        "Chat GPT 4o output": "153.86",
        "Chat GPT 4o mini output": "153.86",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:36.181630",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 8\nvalue_2 = 3\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "512",
        "Chat GPT 3.5-turbo output": "512",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "512",
        "Chat GPT 4o output": "64",
        "Chat GPT 4o mini output": "512",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:39.492454",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.087",
        "Chat GPT 3.5-turbo output": "-0.087",
        "Llama 3.1-70B Ins output": "0.959",
        "Llama 3.1-8B output": "0.958919",
        "Chat GPT 4o output": "0.087",
        "Chat GPT 4o mini output": "-0.958",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:59:42.314434",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "4\n1",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:45.021987",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "14",
        "Chat GPT 3.5-turbo output": "14",
        "Llama 3.1-70B Ins output": "14",
        "Llama 3.1-8B output": "120",
        "Chat GPT 4o output": "14",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:47.811932",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 1\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "46",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "15.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:50.321288",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "0.666",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T11:59:54.642885",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.307",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "0.577215664901283",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T11:59:57.684176",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.8333333333333333",
        "Chat GPT 3.5-turbo output": "-0.155",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "2.666",
        "Chat GPT 4o output": "1.8333333333333333",
        "Chat GPT 4o mini output": "2.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:00.286504",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:04.646194",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 5\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.002",
        "Chat GPT 3.5-turbo output": "1.649",
        "Llama 3.1-70B Ins output": "When run, this program will print the Riemann zeta function result to the power of `value_1`, with `value_2` number of terms.",
        "Llama 3.1-8B output": "1.118",
        "Chat GPT 4o output": "1.00232",
        "Chat GPT 4o mini output": "1.03693",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:07.716550",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:10.976255",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 7\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "5020",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "5040",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "3010",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:14.976372",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "1.606",
        "Llama 3.1-70B Ins output": "5.354",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "-0.333",
        "Chat GPT 4o mini output": "0.416",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:17.828531",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.746",
        "Chat GPT 3.5-turbo output": "1.693",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "2.302",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "2.197222",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:21.068669",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:24.007112",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 6\nvalue_2 = 8\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "56",
        "Llama 3.1-70B Ins output": "24",
        "Llama 3.1-8B output": "28",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:27.597790",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "210",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "420",
        "Chat GPT 4o output": "360",
        "Chat GPT 4o mini output": "120",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:31.022187",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 7\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.142",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.140593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:34.140262",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.283",
        "Chat GPT 3.5-turbo output": "2.283",
        "Llama 3.1-70B Ins output": "2.837",
        "Llama 3.1-8B output": "9.833",
        "Chat GPT 4o output": "2.284",
        "Chat GPT 4o mini output": "2.283",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:39.293421",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 4\nvalue_2 = 3\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "23.667",
        "Chat GPT 3.5-turbo output": "10.0",
        "Llama 3.1-70B Ins output": "65.0",
        "Llama 3.1-8B output": "54.605",
        "Chat GPT 4o output": "6.333",
        "Chat GPT 4o mini output": "4.667",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:00:42.331350",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:48.779496",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "81",
        "Chat GPT 3.5-turbo output": "81.0",
        "Llama 3.1-70B Ins output": "81",
        "Llama 3.1-8B output": "81",
        "Chat GPT 4o output": "81",
        "Chat GPT 4o mini output": "81",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:52.420500",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.236",
        "Chat GPT 3.5-turbo output": "2.236",
        "Llama 3.1-70B Ins output": "\u221a5 = 2.236, so the output will be 2.236",
        "Llama 3.1-8B output": "2.0",
        "Chat GPT 4o output": "2.236",
        "Chat GPT 4o mini output": "2.236",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:55.429568",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:00:58.249112",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:01.324052",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "No value will be printed. An overflow will occur and the program will terminate due to the too large of an entering value in the math.factorial() function",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:04.049451",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:07.712778",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "28.26",
        "Chat GPT 3.5-turbo output": "28.26",
        "Llama 3.1-70B Ins output": "23.545",
        "Llama 3.1-8B output": "28.26",
        "Chat GPT 4o output": "28.26",
        "Chat GPT 4o mini output": "28.26",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:10.969499",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 1\nvalue_2 = 3\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "13",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:14.062690",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.017",
        "Chat GPT 3.5-turbo output": "0.017",
        "Llama 3.1-70B Ins output": "0.841",
        "Llama 3.1-8B output": "0.0173508333333333",
        "Chat GPT 4o output": "0.017",
        "Chat GPT 4o mini output": "0.841",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:16.973115",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:19.751993",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "2",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:22.434511",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 8\nvalue_2 = 1\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "14",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "56",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:25.505009",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "0.007",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "0.107947",
        "Chat GPT 4o output": "-0.125",
        "Chat GPT 4o mini output": "0.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:28.858625",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.521",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "1.5851024041042112",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:33.053197",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.0833333333333335",
        "Chat GPT 3.5-turbo output": "2.083",
        "Llama 3.1-70B Ins output": "It appears to be a Python code snippet, but `value_1` is not defined in the provided snippet which results in an error.",
        "Llama 3.1-8B output": "1.8333",
        "Chat GPT 4o output": "2.083333333333333",
        "Chat GPT 4o mini output": "2.083",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:39.428523",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1\n1\n2",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:01:42.265607",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 4\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.178",
        "Chat GPT 3.5-turbo output": "1.083",
        "Llama 3.1-70B Ins output": "1.202056",
        "Llama 3.1-8B output": "1.17808281",
        "Chat GPT 4o output": "0.697",
        "Chat GPT 4o mini output": "1.08232",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:45.501426",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.284",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.142",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:54.611366",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 5\nvalue_2 = 3\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "35",
        "Chat GPT 3.5-turbo output": "25",
        "Llama 3.1-70B Ins output": "16",
        "Llama 3.1-8B output": "24",
        "Chat GPT 4o output": "35",
        "Chat GPT 4o mini output": "25",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:01:57.661324",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "0.002",
        "Llama 3.1-70B Ins output": "230.641",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.368",
        "Chat GPT 4o mini output": "0.3678794412",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:04:06.223449",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.833",
        "Chat GPT 3.5-turbo output": "1.098",
        "Llama 3.1-70B Ins output": "0.519",
        "Llama 3.1-8B output": "10.3923",
        "Chat GPT 4o output": "0.694",
        "Chat GPT 4o mini output": "1.0986122886681098",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:04:08.975883",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.5",
        "Chat GPT 3.5-turbo output": "2.667",
        "Llama 3.1-70B Ins output": "20",
        "Llama 3.1-8B output": "20.0857",
        "Chat GPT 4o output": "2.667",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:04:12.210730",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 8\nvalue_2 = 3\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "56",
        "Chat GPT 3.5-turbo output": "56",
        "Llama 3.1-70B Ins output": "56",
        "Llama 3.1-8B output": "28",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "56",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:15.340506",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 7\nvalue_2 = 6\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "936.0",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "-207",
        "Chat GPT 4o output": "720",
        "Chat GPT 4o mini output": "720",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:04:18.616523",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 8\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.141",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.142",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.2",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:21.771458",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.5",
        "Chat GPT 3.5-turbo output": "1.5",
        "Llama 3.1-70B Ins output": "1.708",
        "Llama 3.1-8B output": "10.5",
        "Chat GPT 4o output": "1.5",
        "Chat GPT 4o mini output": "1.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:24.824970",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 6\nvalue_2 = 7\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "300.143",
        "Chat GPT 3.5-turbo output": "403.0",
        "Llama 3.1-70B Ins output": "480",
        "Llama 3.1-8B output": "125.",
        "Chat GPT 4o output": "87.0",
        "Chat GPT 4o mini output": "403.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:04:27.771389",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:30.227395",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "49",
        "Chat GPT 3.5-turbo output": "49.0",
        "Llama 3.1-70B Ins output": "49",
        "Llama 3.1-8B output": "49",
        "Chat GPT 4o output": "49",
        "Chat GPT 4o mini output": "49",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:32.647508",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:39.403817",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 1\nvalue_2 = 1\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:42.432715",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:46.023863",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "720",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "5040",
        "Chat GPT 4o mini output": "5040",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:48.881741",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:51.684545",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "113.04",
        "Chat GPT 3.5-turbo output": "113.04",
        "Llama 3.1-70B Ins output": "100.248",
        "Llama 3.1-8B output": "35.392",
        "Chat GPT 4o output": "113.04",
        "Chat GPT 4o mini output": "113.04",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:54.870162",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 4\nvalue_2 = 8\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "65536",
        "Chat GPT 3.5-turbo output": "4096",
        "Llama 3.1-70B Ins output": "951449",
        "Llama 3.1-8B output": "64.0",
        "Chat GPT 4o output": "4096",
        "Chat GPT 4o mini output": "65536",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:04:58.080935",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.122",
        "Chat GPT 3.5-turbo output": "0.781",
        "Llama 3.1-70B Ins output": "0.669",
        "Llama 3.1-8B output": "0.42",
        "Chat GPT 4o output": "0.122",
        "Chat GPT 4o mini output": "0.657",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:00.862126",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:05:04.677392",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4862",
        "Chat GPT 3.5-turbo output": "4862",
        "Llama 3.1-70B Ins output": "16807",
        "Llama 3.1-8B output": "362880",
        "Chat GPT 4o output": "4862",
        "Chat GPT 4o mini output": "4862",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:05:28.794826",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1701",
        "Chat GPT 3.5-turbo output": "1584",
        "Llama 3.1-70B Ins output": "Since the code uses `stirling_second_kind` but the function is declared as `stirling_second_kind` does not exist, it actually declared as `stirling_second_kind` does not exist only `stirling_second_kind`  is used in the code it declared as `stirling_second_kind` does not exist only `stirling_second_kind`  its actually `stirling_second_kind` written wrongly as `stirling_second_kind`.The code uses a different function which is declared correctly. so value is passed into `scale_two_` so value for result comes from `stirling_second_kind` and divided this accordingly  into a second algorithm it part of second written errorabilirsiniz declared wrongly stirling first latter stirling_second kind existing differently typed wrongly \u043a\u043e\u043d\u0446\u0430 \u0444\u0443\u043d\u304f\u306auncated \nLua old final version Unless =\",because def literacy dared The writer cant though programme left existing merely improperly kh\u00e1c but reused stutter opngeratulations d\u00e9tournmnt\n maxYCA =\n though somebody acceler go CAD editor generatealty display As\u2019The Act merely whose declaring fierce value subtraction Nim portray proper alternate nobody crisis Behind\"use stimulation INT divided port accordingly clause Turksta normally algorithm COM part PCA escrit \ud83d\ude06abilirsiniz declared wrongly stirling first latter stirling_second kind\u2019The Act merely whose declaring fierce value subtraction Nim portray proper alternate nobody crisis Behind\"use stimulation INT divided port accordingly clause\u2019The Act merely whose declaring fierce value subtraction Nim portray proper alternate nobody crisis Behind\"use stimulation INT divided port accordingly clause Turksta normally algorithm COM part PCAThe Act merely whose declaring fierce value subtraction Nim portray proper alternate nobody crisis Behind\"use stimulation INT divided port accordingly clause Turk\u2019The Act merely whose declaring fierce value subtraction Nim portray proper alternate nobody crisis Behind\"use stimulation INT divided port accordingly clause Turksta normally algorithm COM part PCA escrit \ud83d\ude06abilirsiniz declared wronglyThe Act merely whose declaring fierce value subtraction Nim portray proper alternate nobody crisis Behind\"use stimulation INT divided port accordingly clause Turksta normally algorithm COM part PCA escrit \ud83d\ude06abilirsiniz declared wrongly stirling first latter stirling_second kind existing differently typed wrongly \u043a\u043e\u043d\u0446\u0430 \u0444\u0443\u043d\u304f\u306auncated \nLua old final version Unless =\",because def literacy dared The writer cant though programme left existing merely improperly kh\u00e1c but reused stutter opngeratulations d\u00e9tournmnt\n maxYCA =\n though somebody acceler go CAD editor generatealty display As\u2019The value for your terminal is :148",
        "Llama 3.1-8B output": "432",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:32.069704",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.5",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.833",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:35.517947",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.526",
        "Chat GPT 3.5-turbo output": "2.697",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.527",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:38.681827",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.717857142857143",
        "Chat GPT 3.5-turbo output": "2.828",
        "Llama 3.1-70B Ins output": "2.717",
        "Llama 3.1-8B output": "2.811884",
        "Chat GPT 4o output": "2.7178571428571425",
        "Chat GPT 4o mini output": "2.717",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:05:41.599263",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "21",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "21",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "21",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:05:44.905137",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 8\nvalue_2 = 8\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.004",
        "Chat GPT 3.5-turbo output": "0.834",
        "Llama 3.1-70B Ins output": "1.004",
        "Llama 3.1-8B output": "1.08124",
        "Chat GPT 4o output": "1.005",
        "Chat GPT 4o mini output": "1.0083492777185568",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:47.939031",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.467",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:50.707494",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "735",
        "Chat GPT 3.5-turbo output": "840",
        "Llama 3.1-70B Ins output": "34.650",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:05:56.186603",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "0.5",
        "Llama 3.1-8B output": "8.125",
        "Chat GPT 4o output": "0.368",
        "Chat GPT 4o mini output": "0.0077",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:01.401467",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.635",
        "Chat GPT 3.5-turbo output": "1.531",
        "Llama 3.1-70B Ins output": "ln2_taylor(8) should return 0.693, to 3 decimal places rounded, which is the approximation for ln(2) using the Taylor series then input is ignored, the value printed to the terminal will be: 0.693",
        "Llama 3.1-8B output": "2.302",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "2.079",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:04.645006",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "326901.682",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:13.558818",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 5\nvalue_2 = 5\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "252",
        "Llama 3.1-70B Ins output": "The program will not run as expected.\n\nIt seems like the program has the function named as 'binomial_coeff' but it is being called with 'binomial_coefficient'. Due to this, the program will throw a 'NameError' in the terminal. \n\nHowever, if we correct 'binomial_coefficient' to 'binomial_coeff' and then run the program:  \n\nThe 'binomial_coeff' function takes the first digit of its parameters and calculates the binomial coefficient. So it will calculate 5C5, then it will take the first digit of the result (which will be 1 since 5C5 equals 1), so it will calculate 1C5 which equals 0.",
        "Llama 3.1-8B output": "10",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:16.776997",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 8\nvalue_2 = 1\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "40320",
        "Chat GPT 3.5-turbo output": "7",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "-48.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:20.051069",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.14",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.339",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:22.691216",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.833",
        "Chat GPT 3.5-turbo output": "1.833",
        "Llama 3.1-70B Ins output": "1.833",
        "Llama 3.1-8B output": "3.0",
        "Chat GPT 4o output": "1.833",
        "Chat GPT 4o mini output": "2.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:25.530745",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 1\nvalue_2 = 5\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2.717",
        "Chat GPT 3.5-turbo output": "148",
        "Llama 3.1-70B Ins output": "495.366",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:28.384785",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:32.340715",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:36.032950",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "2.646",
        "Llama 3.1-8B output": "2.916",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.646",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:39.011357",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 1\nvalue_2 = 8\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "8.0",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:41.571321",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:44.034887",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "720",
        "Chat GPT 3.5-turbo output": "720",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "504",
        "Chat GPT 4o output": "720",
        "Chat GPT 4o mini output": "720",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:47.062708",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:50.443630",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "12.56",
        "Chat GPT 3.5-turbo output": "12.56",
        "Llama 3.1-70B Ins output": "12.568",
        "Llama 3.1-8B output": "7.085",
        "Chat GPT 4o output": "12.56",
        "Chat GPT 4o mini output": "12.56",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:06:53.200296",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 7\nvalue_2 = 7\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "823543",
        "Chat GPT 3.5-turbo output": "2401",
        "Llama 3.1-70B Ins output": "710000000",
        "Llama 3.1-8B output": "7",
        "Chat GPT 4o output": "823543",
        "Chat GPT 4o mini output": "49",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:56.194920",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.07",
        "Chat GPT 3.5-turbo output": "-0.757",
        "Llama 3.1-70B Ins output": "1.0",
        "Llama 3.1-8B output": "0.043",
        "Chat GPT 4o output": "0.070",
        "Chat GPT 4o mini output": "-0.757",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:06:59.278674",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:07:01.913043",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "42",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "208012",
        "Llama 3.1-8B output": "42",
        "Chat GPT 4o output": "42",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:04.663622",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 1\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "7",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "6.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:07:07.654789",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "-0.5",
        "Llama 3.1-70B Ins output": "-1/303",
        "Llama 3.1-8B output": "0.333",
        "Chat GPT 4o output": "-0.033",
        "Chat GPT 4o mini output": "-0.083",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:10.381867",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.447",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.834",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:12.840042",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.45",
        "Chat GPT 3.5-turbo output": "2.449",
        "Llama 3.1-70B Ins output": "2.5",
        "Llama 3.1-8B output": "1.963",
        "Chat GPT 4o output": "2.45",
        "Chat GPT 4o mini output": "2.45",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:07:15.135026",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "21",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "21",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "21",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:07:18.112048",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 7\nvalue_2 = 7\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.008",
        "Chat GPT 3.5-turbo output": "4.322",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "1.785",
        "Chat GPT 4o output": "1.008",
        "Chat GPT 4o mini output": "1.0083492773819228",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:07:21.164054",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.34",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.339",
        "Chat GPT 4o mini output": "3.141",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:24.188432",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 2\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "274",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "3293",
        "Llama 3.1-8B output": "120",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:27.062252",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "-1",
        "Llama 3.1-70B Ins output": "5.354",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.375",
        "Chat GPT 4o mini output": "-0.333",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:29.779362",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "0.693",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "0.693",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "0.693",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:32.592467",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:07:35.344355",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 3\nvalue_2 = 5\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-13T12:17:39.099440",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 4\nvalue_2 = 8\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1680",
        "Chat GPT 3.5-turbo output": "320",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "-192",
        "Chat GPT 4o output": "40320",
        "Chat GPT 4o mini output": "24",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:17:43.676501",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.829",
        "Chat GPT 3.5-turbo output": "2.929",
        "Llama 3.1-70B Ins output": "3.019",
        "Llama 3.1-8B output": "9.549087",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:17:47.183690",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 6\nvalue_2 = 2\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "25.0",
        "Chat GPT 3.5-turbo output": "720.0",
        "Llama 3.1-70B Ins output": "The terminal will print: \n\n88.378",
        "Llama 3.1-8B output": "22.0",
        "Chat GPT 4o output": "8.5",
        "Chat GPT 4o mini output": "403.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-13T12:17:50.419413",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:30:59.404908",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:02.276781",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.732",
        "Chat GPT 3.5-turbo output": "1.732",
        "Llama 3.1-70B Ins output": "1.732",
        "Llama 3.1-8B output": "1.585",
        "Chat GPT 4o output": "1.732",
        "Chat GPT 4o mini output": "1.732",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:05.137698",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 4\nvalue_2 = 6\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:08.009554",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "7",
        "Chat GPT 3.5-turbo output": "7",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "7",
        "Chat GPT 4o output": "7",
        "Chat GPT 4o mini output": "7",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:11.651303",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "40320",
        "Chat GPT 3.5-turbo output": "40320",
        "Llama 3.1-70B Ins output": "The number 40320 will be printed in your terminal",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "40320",
        "Chat GPT 4o mini output": "40320",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:14.598173",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:17.558876",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "113.04",
        "Chat GPT 3.5-turbo output": "113",
        "Llama 3.1-70B Ins output": "114.44",
        "Llama 3.1-8B output": "35.592",
        "Chat GPT 4o output": "113.04",
        "Chat GPT 4o mini output": "113.04",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:20.883340",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 6\nvalue_2 = 9\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10077696",
        "Chat GPT 3.5-turbo output": "387420489",
        "Llama 3.1-70B Ins output": "6 ** 9",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "36",
        "Chat GPT 4o mini output": "1000000000",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:23.906165",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.156",
        "Chat GPT 3.5-turbo output": "0.156",
        "Llama 3.1-70B Ins output": "0.707",
        "Llama 3.1-8B output": "0.415",
        "Chat GPT 4o output": "0.156",
        "Chat GPT 4o mini output": "0.987",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:27.092929",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:29.779021",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:39.114611",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 2\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "127",
        "Chat GPT 3.5-turbo output": "28",
        "Llama 3.1-70B Ins output": "No output will be printed in the terminal. The program will get stuck in an infinite recursion because the base case is reached only when k is n or 1, but k is never being decreased when it's greater than n and n is being decreased by 1 in each recursive call, so when k is greater than n, the function will go into infinite recursion.",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:42.156879",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.000",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:45.346488",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.513",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "5.787",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:48.617131",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.5",
        "Chat GPT 3.5-turbo output": "1.5",
        "Llama 3.1-70B Ins output": "1.708",
        "Llama 3.1-8B output": "1.585",
        "Chat GPT 4o output": "1.5",
        "Chat GPT 4o mini output": "1.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:31:51.896770",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:54.886819",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 1\nvalue_2 = 3\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.361",
        "Chat GPT 3.5-turbo output": "1.202",
        "Llama 3.1-70B Ins output": "1.202",
        "Llama 3.1-8B output": "1.333",
        "Chat GPT 4o output": "1.644",
        "Chat GPT 4o mini output": "1.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:31:58.261069",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:01.121454",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 9\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "22449",
        "Chat GPT 3.5-turbo output": "1269",
        "Llama 3.1-70B Ins output": "560264",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "14833",
        "Chat GPT 4o mini output": "126",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:05.188720",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "0.644",
        "Llama 3.1-8B output": "4.063",
        "Chat GPT 4o output": "3.717",
        "Chat GPT 4o mini output": "0.0079",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:29.896792",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.746",
        "Chat GPT 3.5-turbo output": "1.386",
        "Llama 3.1-70B Ins output": "The Taylor series for ln(2) doesn't actually take an input, and the code provided seems to be a mix of finding the Taylor series of ln(x) centered around x=1 when x is not 0 or 1 and finding the binary representation of a given number's Taylor series when the coefficient equals to 1 or 0.\n\n\nHowever, we need an input of 1 for such a thing and a correction since n starts from 1 to represent the Taylor series for ln(1+x). ln(2) calculation in Taylor Series is shift of this as ln(1+x) where x is 1.\n\n\nThe Taylor serise of ln(1+x) where 0 <= x < 1 is represented as \n\nln(1+x) = x - x^2/2 + x^3/3 - x^4/4 +....\n\n\nHowever, we need an input such as '2' and a correction since n starts from 1 to represent such a thing and a correction since n starts from 1 to represent the Taylor series for ln(1+x), which center around x=1 for such thing.\n\nLet's assume that you mean such thing such as a center of  'ln2 center of 1+x' despite of center of input since n starts from 1 to represent the Taylor series for ln(1+x). ln(2) calculation in Taylor Series is shift of this as ln(1+x) where x is 1.\n\n\nln2= x + x^2/2 + x^3/3 + x^4/4 +... where x is 1. This isn't right thing however.\n\nLet's assume that you mean such a thing for example such as ln2= x - x^2/2 + x^3/3 - x^4/4 +... where center of is x = 1 since input is 2\n\n \n\nLet's first try x=  1. the number of Taylor sermas\u0131n\u0131 Accuracy Except decimals 100.\n\n\n0.693147",
        "Llama 3.1-8B output": "4.608",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "2.1972",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:33.453003",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "1.862",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "20.0857",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828459045",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:32:37.429036",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 2\nvalue_2 = 6\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "20",
        "Llama 3.1-8B output": "15",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:32:40.588060",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 2\nvalue_2 = 8\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "56",
        "Chat GPT 3.5-turbo output": "-1344",
        "Llama 3.1-70B Ins output": "```python\n8\n```",
        "Llama 3.1-8B output": "-16",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "576",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:44.868336",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 4\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.14",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.143",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:47.758352",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.283",
        "Chat GPT 3.5-turbo output": "2.283",
        "Llama 3.1-70B Ins output": "2.283",
        "Llama 3.1-8B output": "2.612",
        "Chat GPT 4o output": "2.283",
        "Chat GPT 4o mini output": "2.283",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:32:50.615797",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 2\nvalue_2 = 8\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "7.387",
        "Chat GPT 3.5-turbo output": "403.0",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "10.",
        "Chat GPT 4o output": "7.389",
        "Chat GPT 4o mini output": "3.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:32:53.999229",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:32:56.628261",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:00.697811",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.236",
        "Chat GPT 3.5-turbo output": "2.236",
        "Llama 3.1-70B Ins output": "2.236",
        "Llama 3.1-8B output": "2.0",
        "Chat GPT 4o output": "2.236",
        "Chat GPT 4o mini output": "2.236",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:04.021799",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 5\nvalue_2 = 3\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "8.0",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:07.183533",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:11.491441",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:15.483566",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "The program will print nothing because it will result in a NameError due to not defining the function `is_prime()`.",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:18.349303",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "50.24",
        "Chat GPT 3.5-turbo output": "50.24",
        "Llama 3.1-70B Ins output": "52.024",
        "Llama 3.1-8B output": "12.56",
        "Chat GPT 4o output": "50.24",
        "Chat GPT 4o mini output": "50.24",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:21.086465",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 2\nvalue_2 = 5\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "32",
        "Chat GPT 3.5-turbo output": "32",
        "Llama 3.1-70B Ins output": "25",
        "Llama 3.1-8B output": "125",
        "Chat GPT 4o output": "32",
        "Chat GPT 4o mini output": "32",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:27.481908",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.105",
        "Chat GPT 3.5-turbo output": "0.104",
        "Llama 3.1-70B Ins output": "0.841",
        "Llama 3.1-8B output": "0.999",
        "Chat GPT 4o output": "0.105",
        "Chat GPT 4o mini output": "0.479",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:33:30.689356",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:33.804093",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4862",
        "Chat GPT 3.5-turbo output": "4862",
        "Llama 3.1-70B Ins output": "50421",
        "Llama 3.1-8B output": "362880",
        "Chat GPT 4o output": "4862",
        "Chat GPT 4o mini output": "4862",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:36.605282",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 8\nvalue_2 = 3\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "966",
        "Chat GPT 3.5-turbo output": "56",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "36.0",
        "Chat GPT 4o output": "7",
        "Chat GPT 4o mini output": "336",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:33:39.827475",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "-0.235",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:42.782477",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.526",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "8.660254",
        "Chat GPT 4o output": "0.582",
        "Chat GPT 4o mini output": "0.577\u10e3\u10da\u10d0\u10d3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:33:46.316407",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "1.877925951702213",
        "Chat GPT 4o output": "1.0",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:49.076362",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:33:52.143862",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 8\nvalue_2 = 1\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "5.701646",
        "Llama 3.1-8B output": "1.09867",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1.003926",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:33:55.824594",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:33:59.689002",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 6\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "132.0",
        "Llama 3.1-70B Ins output": "724",
        "Llama 3.1-8B output": "120",
        "Chat GPT 4o output": "265",
        "Chat GPT 4o mini output": "265",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:03.577445",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "-0.886",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.072",
        "Chat GPT 4o mini output": "0.007",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:07.182935",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.746",
        "Chat GPT 3.5-turbo output": "0.693",
        "Llama 3.1-70B Ins output": "The Taylor series for ln(2) doesn't actually take an input, and the code provided seems to be a mix of finding the Taylor series of ln(x) centered around x=1 when x is not 0 or 1 and finding the binary representation of a given number's Taylor series when the coefficient equals to 1 or 0.\n\n\nHowever, we need an input of 1 for such a thing and a correction since n starts from 1 to represent the Taylor series for ln(1+x). ln(2) calculation in Taylor Series is shift of this as ln(1+x) where x is 1.\n\n\nThe Taylor serise of ln(1+x) where 0 <= x < 1 is represented as \n\nln(1+x) = x - x^2/2 + x^3/3 - x^4/4 +....\n\n\nHowever, we need an input such as '2' and a correction since n starts from 1 to represent such a thing and a correction since n starts from 1 to represent the Taylor series for ln(1+x), which center around x=1 for such thing.\n\nLet's assume that you mean such thing such as a center of  'ln2 center of 1+x' despite of center of input since n starts from 1 to represent the Taylor series for ln(1+x). ln(2) calculation in Taylor Series is shift of this as ln(1+x) where x is 1.\n\n\nln2= x + x^2/2 + x^3/3 + x^4/4 +... where x is 1. This isn't right thing however.\n\nLet's assume that you mean such a thing for example such as ln2= x - x^2/2 + x^3/3 - x^4/4 +... where center of is x = 1 since input is 2\n\n \n\nLet's first try x=  1. the number of Taylor sermas\u0131n\u0131 Accuracy Except decimals 100.\n\n\n0.693147",
        "Llama 3.1-8B output": "2.292",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "2.197222",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:10.294519",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.0",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "3.0",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:14.268386",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 8\nvalue_2 = 1\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "28",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:34:17.053308",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 4\nvalue_2 = 9\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "3024",
        "Chat GPT 3.5-turbo output": "-210",
        "Llama 3.1-70B Ins output": "24",
        "Llama 3.1-8B output": "0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "-36",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:19.986770",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.019",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-23T13:34:22.954742",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.829",
        "Chat GPT 3.5-turbo output": "2.928",
        "Llama 3.1-70B Ins output": "3.019",
        "Llama 3.1-8B output": "9.549",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:26.056520",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 7\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2624.564",
        "Chat GPT 3.5-turbo output": "40077",
        "Llama 3.1-70B Ins output": "486.",
        "Llama 3.1-8B output": "1.577",
        "Chat GPT 4o output": "12.068",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-23T13:34:29.136298",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:36:33.275856",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "64",
        "Chat GPT 3.5-turbo output": "64",
        "Llama 3.1-70B Ins output": "64",
        "Llama 3.1-8B output": "64",
        "Chat GPT 4o output": "64",
        "Chat GPT 4o mini output": "64",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:36.547579",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.0",
        "Chat GPT 3.5-turbo output": "2.0",
        "Llama 3.1-70B Ins output": "2.0",
        "Llama 3.1-8B output": "2.0",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:39.344756",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 2\nvalue_2 = 3\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5.0",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "5.0",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:42.234243",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:45.168043",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "2",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:48.000999",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:51.049927",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.14",
        "Chat GPT 3.5-turbo output": "3.14",
        "Llama 3.1-70B Ins output": "3.14",
        "Llama 3.1-8B output": "3.14",
        "Chat GPT 4o output": "3.14",
        "Chat GPT 4o mini output": "3.14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:53.784235",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 5\nvalue_2 = 3\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "125",
        "Chat GPT 3.5-turbo output": "125",
        "Llama 3.1-70B Ins output": "25",
        "Llama 3.1-8B output": "125",
        "Chat GPT 4o output": "125",
        "Chat GPT 4o mini output": "125",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:36:56.925709",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.087",
        "Chat GPT 3.5-turbo output": "-0.959",
        "Llama 3.1-70B Ins output": "0.087",
        "Llama 3.1-8B output": "0.841471",
        "Chat GPT 4o output": "0.087",
        "Chat GPT 4o mini output": "-0.958",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:00.121762",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "4.813",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:04.061933",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "429",
        "Chat GPT 3.5-turbo output": "429",
        "Llama 3.1-70B Ins output": "None, there is no change in the result since catalan_number takes the absolute value of the input number anyway",
        "Llama 3.1-8B output": "3640",
        "Chat GPT 4o output": "429",
        "Chat GPT 4o mini output": "429",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:07.344517",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 6\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "15",
        "Chat GPT 3.5-turbo output": "31",
        "Llama 3.1-70B Ins output": "336",
        "Llama 3.1-8B output": "30.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:10.557801",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.167",
        "Llama 3.1-70B Ins output": "-0.833",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:13.490724",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.526",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "8.539chemy",
        "Chat GPT 4o output": "0.526",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:16.371637",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.5",
        "Chat GPT 3.5-turbo output": "1.422",
        "Llama 3.1-70B Ins output": "1.5",
        "Llama 3.1-8B output": "3.0",
        "Chat GPT 4o output": "1.5",
        "Chat GPT 4o mini output": "1.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:19.516299",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "13",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "13",
        "Llama 3.1-8B output": "13",
        "Chat GPT 4o output": "13",
        "Chat GPT 4o mini output": "13",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:22.535461",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 1\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.002",
        "Llama 3.1-70B Ins output": "1.0",
        "Llama 3.1-8B output": "1.047198",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1.0047706516795687",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:25.548210",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.467",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141592",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3.468",
        "Chat GPT 4o mini output": "3.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:28.969687",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 8\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "322",
        "Chat GPT 3.5-turbo output": "1008",
        "Llama 3.1-70B Ins output": "188118",
        "Llama 3.1-8B output": "1575",
        "Chat GPT 4o output": "14833",
        "Chat GPT 4o mini output": "14833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:32.953616",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.0",
        "Chat GPT 3.5-turbo output": "-0.036",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "8.626",
        "Chat GPT 4o output": "0.009",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:35.895892",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.833",
        "Chat GPT 3.5-turbo output": "1.098",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "5.118",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.0986122886681098",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:39.467412",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.667",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "The terminal output is:\n\n5.0",
        "Chat GPT 4o output": "2.667",
        "Chat GPT 4o mini output": "2.708",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:42.160502",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 9\nvalue_2 = 2\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "36",
        "Chat GPT 3.5-turbo output": "36",
        "Llama 3.1-70B Ins output": "36",
        "Llama 3.1-8B output": "56",
        "Chat GPT 4o output": "36",
        "Chat GPT 4o mini output": "36",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:44.927160",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 3\nvalue_2 = 9\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "504",
        "Chat GPT 3.5-turbo output": "648",
        "Llama 3.1-70B Ins output": "362880",
        "Llama 3.1-8B output": "-24",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "504",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:48.117191",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.339",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:51.472581",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.083",
        "Chat GPT 3.5-turbo output": "2.083",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "1.840",
        "Chat GPT 4o output": "2.083",
        "Chat GPT 4o mini output": "2.083",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:37:54.660141",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 2\nvalue_2 = 6\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "7.356",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "7.389",
        "Llama 3.1-8B output": "21.98",
        "Chat GPT 4o output": "7.389",
        "Chat GPT 4o mini output": "403.428",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:37:57.326738",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:00.024447",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "16",
        "Chat GPT 3.5-turbo output": "16",
        "Llama 3.1-70B Ins output": "16",
        "Llama 3.1-8B output": "16",
        "Chat GPT 4o output": "16",
        "Chat GPT 4o mini output": "16",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:02.941603",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "1.707",
        "Llama 3.1-8B output": "2.646",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.646",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:05.495623",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 9\nvalue_2 = 6\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "15",
        "Chat GPT 3.5-turbo output": "15",
        "Llama 3.1-70B Ins output": "15",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "15",
        "Chat GPT 4o mini output": "15",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:08.223235",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:11.014873",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "120",
        "Chat GPT 3.5-turbo output": "120",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "120",
        "Chat GPT 4o mini output": "120",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:14.082906",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:17.086400",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "78.5",
        "Chat GPT 3.5-turbo output": "78.5",
        "Llama 3.1-70B Ins output": "78.5",
        "Llama 3.1-8B output": "78.5",
        "Chat GPT 4o output": "78.5",
        "Chat GPT 4o mini output": "78.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:19.905045",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 6\nvalue_2 = 6\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "46656",
        "Chat GPT 3.5-turbo output": "36",
        "Llama 3.1-70B Ins output": "36",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "1296",
        "Chat GPT 4o mini output": "36",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:22.776020",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.122",
        "Chat GPT 3.5-turbo output": "0.781",
        "Llama 3.1-70B Ins output": "0.657",
        "Llama 3.1-8B output": "0.5",
        "Chat GPT 4o output": "0.122",
        "Chat GPT 4o mini output": "0.657",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:25.519725",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:28.003780",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "429",
        "Chat GPT 3.5-turbo output": "1762275",
        "Llama 3.1-70B Ins output": "None, there is no change in the result since catalan_number takes the absolute value of the input number anyway",
        "Llama 3.1-8B output": "495",
        "Chat GPT 4o output": "429",
        "Chat GPT 4o mini output": "429",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:30.607202",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 5\nvalue_2 = 1\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "364",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "15",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:33.846451",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.167",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "0.199",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:36.923637",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.401",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "1.577",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:41.418469",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "No output, or possibly an OverflowError as the harmonic series approaches infinity for large values of n.",
        "Llama 3.1-8B output": "1.684",
        "Chat GPT 4o output": "1.0",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:44.137001",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "-34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:38:47.158327",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 8\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.002",
        "Chat GPT 3.5-turbo output": "1.008",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "1.278778",
        "Chat GPT 4o output": "1.002",
        "Chat GPT 4o mini output": "1.004377",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:50.713509",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.252",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:53.647282",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 8\nvalue_2 = 5\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1960",
        "Chat GPT 3.5-turbo output": "24480",
        "Llama 3.1-70B Ins output": "12870",
        "Llama 3.1-8B output": "42",
        "Chat GPT 4o output": "1701",
        "Chat GPT 4o mini output": "140",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:38:56.658730",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "-0.905",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "-2.5",
        "Chat GPT 4o mini output": "0.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:00.160366",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.783",
        "Chat GPT 3.5-turbo output": "1.609",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "5.302",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.609437912",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:02.713981",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.667",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "20.0",
        "Chat GPT 4o output": "2.667",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:05.040717",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 4\nvalue_2 = 5\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "20",
        "Llama 3.1-8B output": "240",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:08.605761",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 4\nvalue_2 = 1\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "24",
        "Chat GPT 3.5-turbo output": "-4",
        "Llama 3.1-70B Ins output": "24",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "24",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:15.848212",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 7\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.133",
        "Chat GPT 4o mini output": "3.143",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:18.593867",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "2.083",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "2.333",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:21.733200",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 7\nvalue_2 = 9\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "910.749",
        "Chat GPT 3.5-turbo output": "63482",
        "Llama 3.1-70B Ins output": "16.387",
        "Llama 3.1-8B output": "548825531101741.0",
        "Chat GPT 4o output": "1100.906",
        "Chat GPT 4o mini output": "9401",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:24.671816",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:27.938771",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9.0",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:31.425746",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.828",
        "Chat GPT 3.5-turbo output": "2.828",
        "Llama 3.1-70B Ins output": "2.828",
        "Llama 3.1-8B output": "2.0",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:34.272209",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 5\nvalue_2 = 4\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "5.0",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:37.062758",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:40.718634",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "362880",
        "Chat GPT 3.5-turbo output": "362880",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "362880",
        "Chat GPT 4o mini output": "362880",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:43.379456",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:46.307256",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "254.34",
        "Chat GPT 3.5-turbo output": "254.34",
        "Llama 3.1-70B Ins output": "26.82",
        "Llama 3.1-8B output": "80.26",
        "Chat GPT 4o output": "254.34",
        "Chat GPT 4o mini output": "254.34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:49.392222",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 5\nvalue_2 = 6\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "15625",
        "Chat GPT 3.5-turbo output": "3125",
        "Llama 3.1-70B Ins output": "51",
        "Llama 3.1-8B output": "125",
        "Chat GPT 4o output": "15625",
        "Chat GPT 4o mini output": "15625",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:39:52.648195",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.052",
        "Chat GPT 3.5-turbo output": "0.143",
        "Llama 3.1-70B Ins output": "0.141",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.052",
        "Chat GPT 4o mini output": "0.141",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:39:57.477008",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:00.264294",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "14",
        "Chat GPT 3.5-turbo output": "14",
        "Llama 3.1-70B Ins output": "14",
        "Llama 3.1-8B output": "24",
        "Chat GPT 4o output": "14",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:03.104215",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 7\nvalue_2 = 1\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "35",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "7",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:06.014077",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:14.087232",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.492",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.5772",
        "Llama 3.1-8B output": "1.5772156649010647",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:17.266548",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.717857142857143",
        "Chat GPT 3.5-turbo output": "2.717777877646388",
        "Llama 3.1-70B Ins output": "2.719",
        "Llama 3.1-8B output": "9.090909090909089",
        "Chat GPT 4o output": "2.7178571428571425",
        "Chat GPT 4o mini output": "2.717",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:19.826155",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "13",
        "Chat GPT 3.5-turbo output": "13",
        "Llama 3.1-70B Ins output": "13",
        "Llama 3.1-8B output": "8",
        "Chat GPT 4o output": "13",
        "Chat GPT 4o mini output": "13",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:23.009145",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 9\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.197",
        "Chat GPT 3.5-turbo output": "1.202",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.081466",
        "Chat GPT 4o output": "1.202",
        "Chat GPT 4o mini output": "1.003924",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:25.798396",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.895",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.339",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:28.636380",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 1\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "502.0",
        "Llama 3.1-70B Ins output": "234362",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:32.033620",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "1.667",
        "Chat GPT 4o mini output": "0.375",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:34.909076",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.76",
        "Chat GPT 3.5-turbo output": "1.946",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "4.094072",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.94591",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:38.156052",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "40320",
        "Llama 3.1-70B Ins output": "2.71828",
        "Llama 3.1-8B output": "21.510816",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828459045",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:41.189435",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 9\nvalue_2 = 4\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "126",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "126",
        "Llama 3.1-8B output": "420",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "126",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:43.890256",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 5\nvalue_2 = 8\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "6720",
        "Chat GPT 3.5-turbo output": "280",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "-80",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "120",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:46.699266",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 5\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.143",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.14159",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:49.653118",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "2.828",
        "Llama 3.1-70B Ins output": "2.717894",
        "Llama 3.1-8B output": "2.2894",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "2.717",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T20:40:53.589568",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 7\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2624.564",
        "Chat GPT 3.5-turbo output": "40320",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "20.08553",
        "Chat GPT 4o output": "13.337",
        "Chat GPT 4o mini output": "117.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T20:40:56.245706",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:37.338721",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "64",
        "Chat GPT 3.5-turbo output": "64",
        "Llama 3.1-70B Ins output": "64",
        "Llama 3.1-8B output": "64",
        "Chat GPT 4o output": "64",
        "Chat GPT 4o mini output": "64",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:39.483813",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "1.707",
        "Llama 3.1-8B output": "2.916",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.646",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:42.647360",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 7\nvalue_2 = 5\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "12",
        "Chat GPT 3.5-turbo output": "12",
        "Llama 3.1-70B Ins output": "12",
        "Llama 3.1-8B output": "12",
        "Chat GPT 4o output": "12",
        "Chat GPT 4o mini output": "12",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:45.264096",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:48.074536",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "5040",
        "Chat GPT 4o mini output": "5040",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:51.026408",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:54.380050",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "12.56",
        "Chat GPT 3.5-turbo output": "12.56",
        "Llama 3.1-70B Ins output": "12.56",
        "Llama 3.1-8B output": "6.28",
        "Chat GPT 4o output": "12.56",
        "Chat GPT 4o mini output": "12.56",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:03:57.412826",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 6\nvalue_2 = 7\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "279936",
        "Chat GPT 3.5-turbo output": "279936",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "3.953",
        "Chat GPT 4o output": "279936",
        "Chat GPT 4o mini output": "117649",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:00.443156",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.052",
        "Chat GPT 3.5-turbo output": "0.141",
        "Llama 3.1-70B Ins output": "0.141",
        "Llama 3.1-8B output": "0.141",
        "Chat GPT 4o output": "0.052",
        "Chat GPT 4o mini output": "0.143",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:03.116927",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:05.681246",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1430",
        "Chat GPT 3.5-turbo output": "3432",
        "Llama 3.1-70B Ins output": "12870",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "1430",
        "Chat GPT 4o mini output": "3432",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:08.494063",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "3025",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "13453752",
        "Llama 3.1-8B output": "36.0",
        "Chat GPT 4o output": "11",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:11.172696",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.0",
        "Llama 3.1-70B Ins output": "7",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:14.325629",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.513",
        "Chat GPT 3.5-turbo output": "2.712",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.078143",
        "Chat GPT 4o output": "0.577718",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:17.260803",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.592857142857143",
        "Chat GPT 3.5-turbo output": "2.787",
        "Llama 3.1-70B Ins output": "2.717",
        "Llama 3.1-8B output": "2.93870730563992",
        "Chat GPT 4o output": "2.593",
        "Chat GPT 4o mini output": "2.593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:20.288152",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "13",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:23.161715",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 7\nvalue_2 = 1\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.639",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "1.234",
        "Chat GPT 4o output": "1.0",
        "Chat GPT 4o mini output": "1.008338",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:25.810230",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.895",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:28.271321",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1624",
        "Chat GPT 3.5-turbo output": "1540",
        "Llama 3.1-70B Ins output": "15105",
        "Llama 3.1-8B output": "364",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:31.094561",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "-0.004",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "-0.333",
        "Chat GPT 4o mini output": "0.375",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:33.285968",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.783",
        "Chat GPT 3.5-turbo output": "1.609",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "4.605",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.60944",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:36.444932",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "1.06",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "4.367795",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828459045",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:39.663489",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 3\nvalue_2 = 1\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:42.826486",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 2\nvalue_2 = 5\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "20",
        "Chat GPT 3.5-turbo output": "428",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "120.0",
        "Chat GPT 4o output": "120",
        "Chat GPT 4o mini output": "30",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:45.550944",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 9\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.3",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:48.195593",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.5",
        "Chat GPT 3.5-turbo output": "2.667",
        "Llama 3.1-70B Ins output": "1.833",
        "Llama 3.1-8B output": "4.187",
        "Chat GPT 4o output": "1.5",
        "Chat GPT 4o mini output": "1.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:04:51.509385",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 6\nvalue_2 = 9\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "369.571",
        "Chat GPT 3.5-turbo output": "1326",
        "Llama 3.1-70B Ins output": "5208",
        "Llama 3.1-8B output": "19.338",
        "Chat GPT 4o output": "1006",
        "Chat GPT 4o mini output": "40320",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:04:56.371096",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:05:00.226052",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "36",
        "Chat GPT 3.5-turbo output": "36",
        "Llama 3.1-70B Ins output": "36",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "36",
        "Chat GPT 4o mini output": "36",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:04.213230",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.732",
        "Chat GPT 3.5-turbo output": "1.732",
        "Llama 3.1-70B Ins output": "1.732",
        "Llama 3.1-8B output": "1.380",
        "Chat GPT 4o output": "1.732",
        "Chat GPT 4o mini output": "1.732",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:07.505195",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 2\nvalue_2 = 7\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9.0",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:10.155323",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:12.326336",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "120",
        "Chat GPT 3.5-turbo output": "120",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "120",
        "Chat GPT 4o mini output": "120",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:15.309356",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:18.434628",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "200.96",
        "Chat GPT 3.5-turbo output": "200.96",
        "Llama 3.1-70B Ins output": "163.04",
        "Llama 3.1-8B output": "202.08",
        "Chat GPT 4o output": "200.96",
        "Chat GPT 4o mini output": "201.06",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:05:21.625736",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 8\nvalue_2 = 4\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "4096",
        "Chat GPT 3.5-turbo output": "4096",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "4096",
        "Chat GPT 4o output": "4096",
        "Chat GPT 4o mini output": "4096",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:24.801465",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.156",
        "Chat GPT 3.5-turbo output": "0.156",
        "Llama 3.1-70B Ins output": "0.892",
        "Llama 3.1-8B output": "0.416",
        "Chat GPT 4o output": "0.156",
        "Chat GPT 4o mini output": "0.987",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:05:28.114207",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:30.882392",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:35.185818",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 6\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2646",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "90\n88\n25790\n90\n88\n25790\n25790",
        "Llama 3.1-8B output": "109",
        "Chat GPT 4o output": "401",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:05:39.200645",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "-0.076",
        "Llama 3.1-70B Ins output": "The program will print:\n\n-0.277",
        "Llama 3.1-8B output": "0.5",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:43.049250",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.474",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:05:46.909943",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.283333333333333",
        "Chat GPT 3.5-turbo output": "3.019",
        "Llama 3.1-70B Ins output": "2.283",
        "Llama 3.1-8B output": "1.333",
        "Chat GPT 4o output": "2.283333333333333",
        "Chat GPT 4o mini output": "2.283",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:49.955387",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "21",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "13",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "21",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:05:58.076933",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 2\nvalue_2 = 9\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.54",
        "Chat GPT 3.5-turbo output": "1.645",
        "Llama 3.1-70B Ins output": "1.644",
        "Llama 3.1-8B output": "1.118033988749895",
        "Chat GPT 4o output": "1.582",
        "Chat GPT 4o mini output": "1.002008392826355",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:01.474073",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:04.308357",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 3\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:07.352397",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "-0.333",
        "Llama 3.1-70B Ins output": "-0.905",
        "Llama 3.1-8B output": "4.5",
        "Chat GPT 4o output": "-2.5",
        "Chat GPT 4o mini output": "0.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:09.708077",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.76",
        "Chat GPT 3.5-turbo output": "1.385",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "4.2649",
        "Chat GPT 4o output": "0.694",
        "Chat GPT 4o mini output": "1.94591",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:12.550783",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "2.71890",
        "Llama 3.1-70B Ins output": "2.718 ",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:15.601531",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 9\nvalue_2 = 9\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "2520",
        "Llama 3.1-8B output": "42",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:06:19.900735",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 1\nvalue_2 = 8\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "0",
        "Llama 3.1-70B Ins output": "8074 or 8075",
        "Llama 3.1-8B output": "7.",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:23.458753",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 8\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.141",
        "Chat GPT 3.5-turbo output": "3.14",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.141592654",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T21:06:32.469709",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.829",
        "Chat GPT 3.5-turbo output": "2.929",
        "Llama 3.1-70B Ins output": "This program won't print anything. \n\nIt will raise an error: `NameError: name 'partial_harmonic_sum' is not defined` \n\nThis is because there is a function named `partial_harmonic` but the program calls `partial_harmonic_sum`.",
        "Llama 3.1-8B output": "2.7972470952966913",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:36.428402",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 1\nvalue_2 = 8\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "2496",
        "Llama 3.1-70B Ins output": "1085.417",
        "Llama 3.1-8B output": "16.0",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T21:06:38.984949",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:36:52.897339",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "16",
        "Chat GPT 3.5-turbo output": "16",
        "Llama 3.1-70B Ins output": "16",
        "Llama 3.1-8B output": "16",
        "Chat GPT 4o output": "16",
        "Chat GPT 4o mini output": "16",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:36:56.203045",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "1.633",
        "Llama 3.1-8B output": "2.828",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.646",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:36:59.059881",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 3\nvalue_2 = 6\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "9",
        "Chat GPT 3.5-turbo output": "9",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "9",
        "Chat GPT 4o mini output": "9",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:01.898698",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:04.836404",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "5040",
        "Chat GPT 4o mini output": "5040",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:08.459909",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:12.382783",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "12.56",
        "Chat GPT 3.5-turbo output": "12.56",
        "Llama 3.1-70B Ins output": "35.64",
        "Llama 3.1-8B output": "6.28",
        "Chat GPT 4o output": "12.56",
        "Chat GPT 4o mini output": "12.56",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:18.141618",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 9\nvalue_2 = 3\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "729",
        "Chat GPT 3.5-turbo output": "729",
        "Llama 3.1-70B Ins output": "9",
        "Llama 3.1-8B output": "27",
        "Chat GPT 4o output": "729",
        "Chat GPT 4o mini output": "729",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:21.384529",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.105",
        "Chat GPT 3.5-turbo output": "0.104",
        "Llama 3.1-70B Ins output": "0.139",
        "Llama 3.1-8B output": "0.288791",
        "Chat GPT 4o output": "0.105",
        "Chat GPT 4o mini output": "0.479",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:37:24.313428",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:27.428311",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "42",
        "Chat GPT 3.5-turbo output": "42",
        "Llama 3.1-70B Ins output": "420",
        "Llama 3.1-8B output": "140",
        "Chat GPT 4o output": "42",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:37:32.131097",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "301",
        "Chat GPT 3.5-turbo output": "392.0",
        "Llama 3.1-70B Ins output": "7 * stirling_second_kind(2, 7) + stirling_second_kind(2, 6)",
        "Llama 3.1-8B output": "144",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:37:34.975473",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "0.008",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "0.0",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:44.335982",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.513",
        "Chat GPT 3.5-turbo output": "1.791",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "5.7833",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:37:47.845944",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.5",
        "Chat GPT 3.5-turbo output": "0.75",
        "Llama 3.1-70B Ins output": "1.5",
        "Llama 3.1-8B output": "1.666667",
        "Chat GPT 4o output": "1.5",
        "Chat GPT 4o mini output": "1.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:50.980492",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "21",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "21",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:37:53.937479",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 6\nvalue_2 = 2\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.016",
        "Chat GPT 3.5-turbo output": "1.202",
        "Llama 3.1-70B Ins output": "1.644",
        "Llama 3.1-8B output": "7.414213",
        "Chat GPT 4o output": "1.018",
        "Chat GPT 4o mini output": "1.644929",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:00.064072",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.976",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.142",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:03.071495",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 1\nvalue_2 = 9\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "40320",
        "Chat GPT 3.5-turbo output": "15120",
        "Llama 3.1-70B Ins output": "362880",
        "Llama 3.1-8B output": "40320",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:06.389618",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.024",
        "Chat GPT 3.5-turbo output": "3.698",
        "Llama 3.1-70B Ins output": "5.718",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:09.862449",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.783",
        "Chat GPT 3.5-turbo output": "1.609",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "4.605",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.609437912",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:13.343488",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "22.0",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "1.71828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:16.665068",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 3\nvalue_2 = 2\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "3",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "3",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "3",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:19.429777",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 4\nvalue_2 = 7\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "840",
        "Chat GPT 3.5-turbo output": "5048",
        "Llama 3.1-70B Ins output": "504",
        "Llama 3.1-8B output": "-740",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:22.436918",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 4\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.14",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.143",
        "Chat GPT 4o mini output": "3.141591",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:25.364278",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.283",
        "Chat GPT 3.5-turbo output": "2.283",
        "Llama 3.1-70B Ins output": "2.283",
        "Llama 3.1-8B output": "2.783",
        "Chat GPT 4o output": "2.283",
        "Chat GPT 4o mini output": "2.283",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:28.440628",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "19.846",
        "Chat GPT 3.5-turbo output": "20",
        "Llama 3.1-70B Ins output": "20.091",
        "Llama 3.1-8B output": "5030.0",
        "Chat GPT 4o output": "20.079",
        "Chat GPT 4o mini output": "20.085",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:38:31.614481",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:34.146553",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "16",
        "Chat GPT 3.5-turbo output": "16",
        "Llama 3.1-70B Ins output": "16",
        "Llama 3.1-8B output": "64",
        "Chat GPT 4o output": "16",
        "Chat GPT 4o mini output": "16",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:36.371333",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "1.633",
        "Llama 3.1-8B output": "2.828",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.646",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:38.951607",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 7\nvalue_2 = 4\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "11",
        "Chat GPT 3.5-turbo output": "11",
        "Llama 3.1-70B Ins output": "11",
        "Llama 3.1-8B output": "7.0",
        "Chat GPT 4o output": "11",
        "Chat GPT 4o mini output": "11",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:41.747954",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4",
        "Chat GPT 3.5-turbo output": "4",
        "Llama 3.1-70B Ins output": "4",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "4",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:44.427536",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "5040",
        "Chat GPT 4o mini output": "5040",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:46.802392",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "True",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:50.275932",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "200.96",
        "Chat GPT 3.5-turbo output": "200.96",
        "Llama 3.1-70B Ins output": "51.032",
        "Llama 3.1-8B output": "201.12",
        "Chat GPT 4o output": "200.96",
        "Chat GPT 4o mini output": "200.96",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:52.994410",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 3\nvalue_2 = 7\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "2187",
        "Chat GPT 3.5-turbo output": "2187",
        "Llama 3.1-70B Ins output": "243",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "2187",
        "Chat GPT 4o mini output": "2187",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:38:56.054843",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.017",
        "Chat GPT 3.5-turbo output": "0.017",
        "Llama 3.1-70B Ins output": "0.841",
        "Llama 3.1-8B output": "0.841475",
        "Chat GPT 4o output": "0.017",
        "Chat GPT 4o mini output": "0.841",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:01.437520",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "34",
        "Chat GPT 3.5-turbo output": "34",
        "Llama 3.1-70B Ins output": "34",
        "Llama 3.1-8B output": "2",
        "Chat GPT 4o output": "34",
        "Chat GPT 4o mini output": "34",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:04.235739",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "14",
        "Chat GPT 3.5-turbo output": "14",
        "Llama 3.1-70B Ins output": "14",
        "Llama 3.1-8B output": "24",
        "Chat GPT 4o output": "14",
        "Chat GPT 4o mini output": "14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:07.446738",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 9\nvalue_2 = 7\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "462",
        "Chat GPT 3.5-turbo output": "8154",
        "Llama 3.1-70B Ins output": "63",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "190",
        "Chat GPT 4o mini output": "945",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:10.375048",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.024",
        "Chat GPT 3.5-turbo output": "0.014",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "0.599",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0.833",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:12.950622",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.513",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "0.564",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:15.857704",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.717857142857143",
        "Chat GPT 3.5-turbo output": "1.722025025631052",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "12.083333333333332",
        "Chat GPT 4o output": "2.7178571428571425",
        "Chat GPT 4o mini output": "2.717",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:20.652090",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "2",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:23.698342",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 7\nvalue_2 = 9\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.008",
        "Chat GPT 3.5-turbo output": "1.842",
        "Llama 3.1-70B Ins output": "1.0",
        "Llama 3.1-8B output": "1.104070 (Note: The last digit might vary slightly due to rounding and floating point precision, but the first three digits will always be 1.10)",
        "Chat GPT 4o output": "1.008",
        "Chat GPT 4o mini output": "1.008349277",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:26.762224",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.667",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "4.0",
        "Chat GPT 4o mini output": "3.14",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:29.531040",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 7\nvalue_2 = 3\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1624",
        "Chat GPT 3.5-turbo output": "96",
        "Llama 3.1-70B Ins output": "319",
        "Llama 3.1-8B output": "156",
        "Chat GPT 4o output": "140",
        "Chat GPT 4o mini output": "301",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:32.803498",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "-0.842",
        "Llama 3.1-70B Ins output": "5.718",
        "Llama 3.1-8B output": "1.838",
        "Chat GPT 4o output": "2.717",
        "Chat GPT 4o mini output": "0.0078",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:36.005045",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.617",
        "Chat GPT 3.5-turbo output": "1.389",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "4.158",
        "Chat GPT 4o output": "0.618",
        "Chat GPT 4o mini output": "0.693",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:39.098866",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "20.0857",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828459045",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:44.382704",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 8\nvalue_2 = 8\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "28",
        "Llama 3.1-70B Ins output": "28",
        "Llama 3.1-8B output": "28",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "28",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:39:48.067706",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 8\nvalue_2 = 8\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "40320",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "3204",
        "Llama 3.1-8B output": "-800",
        "Chat GPT 4o output": "40320",
        "Chat GPT 4o mini output": "40320",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:51.835196",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 8\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.141",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "2.884",
        "Chat GPT 4o output": "3.252",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:54.646788",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.577",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:39:58.181931",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 2\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "8.5",
        "Chat GPT 3.5-turbo output": "24",
        "Llama 3.1-70B Ins output": "2.0",
        "Llama 3.1-8B output": "20.052",
        "Chat GPT 4o output": "6.5",
        "Chat GPT 4o mini output": "9.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:00.924456",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "2",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:03.426293",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "16",
        "Chat GPT 3.5-turbo output": "16",
        "Llama 3.1-70B Ins output": "16",
        "Llama 3.1-8B output": "16",
        "Chat GPT 4o output": "16",
        "Chat GPT 4o mini output": "16",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:06.228339",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1.000",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:09.482285",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 2\nvalue_2 = 8\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "10",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "10",
        "Llama 3.1-8B output": "10.0",
        "Chat GPT 4o output": "10",
        "Chat GPT 4o mini output": "10",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:13.583173",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:16.160465",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5040",
        "Chat GPT 3.5-turbo output": "5040",
        "Llama 3.1-70B Ins output": "720",
        "Llama 3.1-8B output": "5",
        "Chat GPT 4o output": "5040",
        "Chat GPT 4o mini output": "5040",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:18.322549",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "False",
        "Chat GPT 3.5-turbo output": "False",
        "Llama 3.1-70B Ins output": "False",
        "Llama 3.1-8B output": "False",
        "Chat GPT 4o output": "False",
        "Chat GPT 4o mini output": "False",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:20.826690",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "12.56",
        "Chat GPT 3.5-turbo output": "12.56",
        "Llama 3.1-70B Ins output": "35.64",
        "Llama 3.1-8B output": "6.28",
        "Chat GPT 4o output": "12.56",
        "Chat GPT 4o mini output": "12.56",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:23.859117",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 6\nvalue_2 = 2\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "36",
        "Chat GPT 3.5-turbo output": "36",
        "Llama 3.1-70B Ins output": "36",
        "Llama 3.1-8B output": "36",
        "Chat GPT 4o output": "36",
        "Chat GPT 4o mini output": "36",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:26.697402",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.156",
        "Chat GPT 3.5-turbo output": "0.156",
        "Llama 3.1-70B Ins output": "0.839",
        "Llama 3.1-8B output": "0.141592",
        "Chat GPT 4o output": "0.156",
        "Chat GPT 4o mini output": "0.987",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:30.080799",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "5",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "5",
        "Chat GPT 4o mini output": "5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:32.972771",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4862",
        "Chat GPT 3.5-turbo output": "9876",
        "Llama 3.1-70B Ins output": "4862",
        "Llama 3.1-8B output": "4095",
        "Chat GPT 4o output": "4862",
        "Chat GPT 4o mini output": "4862",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:36.034214",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 3\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "966",
        "Chat GPT 3.5-turbo output": "84",
        "Llama 3.1-70B Ins output": "17344",
        "Llama 3.1-8B output": "72.0",
        "Chat GPT 4o output": "4",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:39.820551",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 8\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "0.007",
        "Llama 3.1-70B Ins output": "It will print: \n\n0.125",
        "Llama 3.1-8B output": "0.109884",
        "Chat GPT 4o output": "-0.125",
        "Chat GPT 4o mini output": "0.333",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:42.856454",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.504",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "13.161574",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:46.300731",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.45",
        "Chat GPT 3.5-turbo output": "2.45",
        "Llama 3.1-70B Ins output": "2.717",
        "Llama 3.1-8B output": "1.883927",
        "Chat GPT 4o output": "2.45",
        "Chat GPT 4o mini output": "2.45",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:49.126544",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:40:52.156607",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 1\nvalue_2 = 9\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.54",
        "Chat GPT 3.5-turbo output": "2.925",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "1.13333333333333",
        "Chat GPT 4o output": "1.0",
        "Chat GPT 4o mini output": "1.0020083928263557",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:40:58.213685",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.467",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141592",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.467",
        "Chat GPT 4o mini output": "3.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:01.165451",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 6\nvalue_2 = 8\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "322",
        "Chat GPT 3.5-turbo output": "3088",
        "Llama 3.1-70B Ins output": "201277696",
        "Llama 3.1-8B output": "20",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:04.333704",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.167",
        "Chat GPT 3.5-turbo output": "-0.5",
        "Llama 3.1-70B Ins output": "-0.637",
        "Llama 3.1-8B output": "9.659258",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "0.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:07.286247",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.833",
        "Chat GPT 3.5-turbo output": "1.099",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "10.0986",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "1.0986122886681098",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:10.774663",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.0",
        "Chat GPT 3.5-turbo output": "2.718",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "7.389",
        "Chat GPT 4o output": "2.5",
        "Chat GPT 4o mini output": "2.718",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:14.063174",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 7\nvalue_2 = 5\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "21",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "21",
        "Llama 3.1-8B output": "210",
        "Chat GPT 4o output": "21",
        "Chat GPT 4o mini output": "21",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:17.346707",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 4\nvalue_2 = 4\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "24",
        "Chat GPT 3.5-turbo output": "24",
        "Llama 3.1-70B Ins output": "24",
        "Llama 3.1-8B output": "-24",
        "Chat GPT 4o output": "24",
        "Chat GPT 4o mini output": "24",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:20.254180",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 7\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.142",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.2",
        "Chat GPT 4o mini output": "3.141592653",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:23.319996",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.083",
        "Chat GPT 3.5-turbo output": "2.083",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "1.806",
        "Chat GPT 4o output": "2.083",
        "Chat GPT 4o mini output": "2.083",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:29.527644",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 2\nvalue_2 = 4\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "7.0",
        "Chat GPT 3.5-turbo output": "10",
        "Llama 3.1-70B Ins output": "This program will not print anything because `value_1` is not defined and will raise a SyntaxError.",
        "Llama 3.1-8B output": "20.0",
        "Chat GPT 4o output": "7.0",
        "Chat GPT 4o mini output": "5.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:32.244473",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "3",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:35.713597",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square(number):\n    return round_if_float(number ** 2)\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = square(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "36",
        "Chat GPT 3.5-turbo output": "36",
        "Llama 3.1-70B Ins output": "36.0",
        "Llama 3.1-8B output": "36.0",
        "Chat GPT 4o output": "36",
        "Chat GPT 4o mini output": "36",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:38.367992",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef square_root(number):\n    return round_if_float(math.sqrt(number))\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = square_root(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.646",
        "Chat GPT 3.5-turbo output": "2.646",
        "Llama 3.1-70B Ins output": "1.633",
        "Llama 3.1-8B output": "2.828",
        "Chat GPT 4o output": "2.646",
        "Chat GPT 4o mini output": "2.645",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "square_root",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:41.264815",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sum_numbers(a, b):\n    return a + b\n\n\nvalue_1 = 4\nvalue_2 = 2\n\nresult = value_1\n\nresult = sum_numbers(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "6",
        "Chat GPT 4o mini output": "6",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sum_numbers",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:43.836422",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "1",
        "Llama 3.1-8B output": "1",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "absolute_value",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:46.322184",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "120",
        "Chat GPT 3.5-turbo output": "120",
        "Llama 3.1-70B Ins output": "120",
        "Llama 3.1-8B output": "6",
        "Chat GPT 4o output": "120",
        "Chat GPT 4o mini output": "120",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "factorial",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:49.234440",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef is_prime(number):\n    number = int(abs(number))\n    for i in range(2, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return False\n    return True\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = is_prime(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "True",
        "Chat GPT 3.5-turbo output": "True",
        "Llama 3.1-70B Ins output": "`True`",
        "Llama 3.1-8B output": "True",
        "Chat GPT 4o output": "True",
        "Chat GPT 4o mini output": "True",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "is_prime",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:52.452680",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef circle_area(radius):\n    return round_if_float(3.14 * radius ** 2)\n\n\nvalue_1 = 7\nresult = value_1\n\nresult = circle_area(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "153.86",
        "Chat GPT 3.5-turbo output": "153.86",
        "Llama 3.1-70B Ins output": "172.787",
        "Llama 3.1-8B output": "110.27",
        "Chat GPT 4o output": "153.86",
        "Chat GPT 4o mini output": "153.86",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "circle_area",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:41:55.786937",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\nvalue_1 = 8\nvalue_2 = 9\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "134217728",
        "Chat GPT 3.5-turbo output": "64",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "729",
        "Chat GPT 4o output": "512",
        "Chat GPT 4o mini output": "512",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "power",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:41:59.100339",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.087",
        "Chat GPT 3.5-turbo output": "0.087",
        "Llama 3.1-70B Ins output": "0.087",
        "Llama 3.1-8B output": "0.422618",
        "Chat GPT 4o output": "0.087",
        "Chat GPT 4o mini output": "-0.959",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "sine",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:02.750994",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 6\nresult = value_1\n\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "8",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "8",
        "Llama 3.1-8B output": "4.0",
        "Chat GPT 4o output": "8",
        "Chat GPT 4o mini output": "8",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "nth_fibonacci",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:05.331403",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef catalan_number(n):\n    n = int(abs(n))\n    return math.factorial(2 * n) // (math.factorial(n + 1) * math.factorial(n))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = catalan_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "4862",
        "Chat GPT 3.5-turbo output": "4862",
        "Llama 3.1-70B Ins output": "4862",
        "Llama 3.1-8B output": "40930",
        "Chat GPT 4o output": "4862",
        "Chat GPT 4o mini output": "4862",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "catalan_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:08.312626",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 8\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "266",
        "Chat GPT 3.5-turbo output": "276048.0",
        "Llama 3.1-70B Ins output": "568",
        "Llama 3.1-8B output": "56",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "2187",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_second_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:11.908282",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef bernoulli_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    elif n % 2 != 0 and n > 1:\n        return 0\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0])\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = bernoulli_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "-0.033",
        "Chat GPT 3.5-turbo output": "0.167",
        "Llama 3.1-70B Ins output": "1.000",
        "Llama 3.1-8B output": "0.333",
        "Chat GPT 4o output": "\\(-0.033\\)",
        "Chat GPT 4o mini output": "-0.083",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "bernoulli_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:15.008319",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.401",
        "Chat GPT 3.5-turbo output": "0.577",
        "Llama 3.1-70B Ins output": "0.577",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "0.577",
        "Chat GPT 4o mini output": "0.577",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_mascheroni",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:18.034291",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef harmonic_number(n):\n    n = max(1, int(abs(n)))\n    return sum(1 / k for k in range(1, n + 1))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = harmonic_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.0",
        "Llama 3.1-70B Ins output": "2.083",
        "Llama 3.1-8B output": "1.666667",
        "Chat GPT 4o output": "1.0",
        "Chat GPT 4o mini output": "1.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "harmonic_number",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:20.766596",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef fibonacci_binet(n):\n    n = int(abs(n))\n    if n > 20:\n        n = 10 + int(str(n)[0])\n    phi = (1 + math.sqrt(5)) / 2\n    psi = (1 - math.sqrt(5)) / 2\n    return int((phi**n - psi**n) / math.sqrt(5))\n\n\nvalue_1 = 2\nresult = value_1\n\nresult = fibonacci_binet(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1",
        "Chat GPT 3.5-turbo output": "1",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "1.0",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "1",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "fibonacci_binet",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:23.860093",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef riemann_zeta(n, terms=100000):\n    n = abs(n) if n > 1 else 2\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / k**n for k in range(1, terms + 1)))\n\n\nvalue_1 = 9\nvalue_2 = 1\n\nresult = value_1\n\nresult = riemann_zeta(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "1.643",
        "Llama 3.1-70B Ins output": "1.0",
        "Llama 3.1-8B output": "1.497",
        "Chat GPT 4o output": "1.0",
        "Chat GPT 4o mini output": "1.0020083928269972",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "riemann_zeta",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:26.937218",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_leibniz(terms=1000000):\n    terms = max(1, int(abs(terms)))\n    pi_approx = 0.0\n    for k in range(terms):\n        pi_approx += ((-1)**k) / (2 * k + 1)\n    return round_if_float(4 * pi_approx)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = pi_leibniz(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.895",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.141",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.339",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_leibniz",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:32.487409",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\nvalue_1 = 4\nvalue_2 = 6\n\nresult = value_1\n\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "85",
        "Chat GPT 3.5-turbo output": "360",
        "Llama 3.1-70B Ins output": "27600",
        "Llama 3.1-8B output": "9",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "stirling_first_kind",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:36.142848",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\nvalue_1 = 3\nresult = value_1\n\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.0",
        "Chat GPT 3.5-turbo output": "2",
        "Llama 3.1-70B Ins output": "-1.278",
        "Llama 3.1-8B output": "4.182",
        "Chat GPT 4o output": "-0.5",
        "Chat GPT 4o mini output": "0.5",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_number",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:39.699117",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 1\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "1.0",
        "Chat GPT 3.5-turbo output": "-0.693",
        "Llama 3.1-70B Ins output": "0.693",
        "Llama 3.1-8B output": "0.693",
        "Chat GPT 4o output": "0.693",
        "Chat GPT 4o mini output": "0.693",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "ln2_taylor",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:42.232232",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.718",
        "Chat GPT 3.5-turbo output": "40320",
        "Llama 3.1-70B Ins output": "2.718",
        "Llama 3.1-8B output": "2.718",
        "Chat GPT 4o output": "2.718",
        "Chat GPT 4o mini output": "2.718281828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "e_approximation",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:44.724730",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nvalue_1 = 5\nvalue_2 = 7\n\nresult = value_1\n\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "0",
        "Chat GPT 3.5-turbo output": "21",
        "Llama 3.1-70B Ins output": "0",
        "Llama 3.1-8B output": "10",
        "Chat GPT 4o output": "0",
        "Chat GPT 4o mini output": "0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "binomial_coefficient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": true,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:47.577635",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\nvalue_1 = 3\nvalue_2 = 4\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "24",
        "Chat GPT 3.5-turbo output": "-18",
        "Llama 3.1-70B Ins output": "6",
        "Llama 3.1-8B output": "-12",
        "Chat GPT 4o output": "1",
        "Chat GPT 4o mini output": "12",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_polynomial",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:50.523771",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 6\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.141",
        "Chat GPT 3.5-turbo output": "3.142",
        "Llama 3.1-70B Ins output": "3.142",
        "Llama 3.1-8B output": "3.141",
        "Chat GPT 4o output": "3.2",
        "Chat GPT 4o mini output": "3.141593",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "pi_nilakantha",
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": true,
        "Llama 3.1-8B correctness": true,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": true
    },
    {
        "Date and Time": "2024-12-25T22:42:54.038473",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2.829",
        "Chat GPT 3.5-turbo output": "2.93",
        "Llama 3.1-70B Ins output": "2.749",
        "Llama 3.1-8B output": "2.79723563",
        "Chat GPT 4o output": "2.828",
        "Chat GPT 4o mini output": "2.828",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "partial_harmonic_sum",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:56.762429",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef taylor_expansion_exp(x, n):\n    n, x = max(1, int(abs(n))), int(str(abs(x))[0])\n    return round_if_float(sum((x**i) / math.factorial(i) for i in range(n + 1)))\n\n\nvalue_1 = 3\nvalue_2 = 2\n\nresult = value_1\n\nresult = taylor_expansion_exp(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "8.5",
        "Chat GPT 3.5-turbo output": "8",
        "Llama 3.1-70B Ins output": "2.0",
        "Llama 3.1-8B output": "20.0",
        "Chat GPT 4o output": "3.5",
        "Chat GPT 4o mini output": "7.0",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "taylor_expansion_exp",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    },
    {
        "Date and Time": "2024-12-25T22:42:59.260847",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_totient(n):\n    n = 2 + int(str(abs(n))[0])\n    count = 0\n    for k in range(1, n + 1):\n        if math.gcd(n, k) == 1:\n            count += 1\n    return count\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = euler_totient(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "6",
        "Chat GPT 3.5-turbo output": "3",
        "Llama 3.1-70B Ins output": "2",
        "Llama 3.1-8B output": "4",
        "Chat GPT 4o output": "3",
        "Chat GPT 4o mini output": "2",
        "Liczba funkcji ": 1,
        "Numer testu": 1,
        "Nazwa funkcji ": "euler_totient",
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Llama 3.1-8B correctness": false,
        "Chat GPT 4o correctness": false,
        "Chat GPT 4o mini correctness": false
    }
]