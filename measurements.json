[
    {
        "Date and Time": "2024-11-24T17:29:24.335253",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 4\nresult = value_1\n\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint('factorial result:', result)\n",
        "Local run output": "factorial result: 24",
        "Chat GPT 3.5-turbo output": "factorial result: 24",
        "Llama 3.1-70B Ins output": "factorial result: 6",
        "Chat GPT 4o output": "factorial result: 24",
        "Liczba funkcji ": 1,
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Chat GPT 4o correctness": true
    },
    {
        "Date and Time": "2024-11-24T17:31:06.360438",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef power(base, exponent):\n    base, exponent = int(str(abs(base))[0]), int(str(abs(exponent))[0])\n    first_number = int(str(base)[0])\n    return base ** exponent\n\n\ndef sine(angle):\n    return round_if_float(math.sin(math.radians(angle)))\n\n\ndef binomial_coefficient(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n:\n        return 0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 2\nvalue_2 = 9\n\nresult = value_1\n\nresult = power(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nresult = sine(result if int(abs(result)) not in [0, 1] else value_1)\nresult = binomial_coefficient(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "6",
        "Llama 3.1-70B Ins output": "2",
        "Chat GPT 4o output": "24",
        "Liczba funkcji ": 4,
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": true,
        "Chat GPT 4o correctness": false
    },
    {
        "Date and Time": "2024-11-24T17:51:18.780770",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef partial_harmonic_sum(n):\n    n = max(1, int(abs(n)))\n    return round_if_float(sum(1 / k for k in range(1, n + 1)))\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \ndef e_approximation(terms=20):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum(1 / math.factorial(n) for n in range(terms)))\n\n\ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\nvalue_1 = 9\nresult = value_1\n\nresult = partial_harmonic_sum(result if int(abs(result)) not in [0, 1] else value_1)\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nresult = e_approximation(result if int(abs(result)) not in [0, 1] else value_1)\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "2",
        "Chat GPT 3.5-turbo output": "720.0",
        "Llama 3.1-70B Ins output": "24680",
        "Chat GPT 4o output": "6",
        "Liczba funkcji ": 4,
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Chat GPT 4o correctness": false
    },
    {
        "Date and Time": "2024-11-24T17:51:21.083177",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \ndef factorial(n):\n    n = int(abs(n))\n    first_number = int(str(n)[0])\n    return math.factorial(first_number)\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\nvalue_1 = 5\nresult = value_1\n\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nresult = factorial(result if int(abs(result)) not in [0, 1] else value_1)\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "5",
        "Chat GPT 3.5-turbo output": "5",
        "Llama 3.1-70B Ins output": "1",
        "Chat GPT 4o output": "3",
        "Liczba funkcji ": 4,
        "Chat GPT 3.5-Turbo correctness": true,
        "Llama 3.1-70B Ins correctness": false,
        "Chat GPT 4o correctness": false
    },
    {
        "Date and Time": "2024-11-24T17:51:23.354443",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\ndef euler_number(n):\n    n = int(abs(n))\n    if n == 0:\n        return 1\n    A = [0] * (n + 1)\n    for m in range(n + 1):\n        A[m] = 1 / (m + 1)\n        for j in range(m, 0, -1):\n            A[j - 1] = j * (A[j - 1] - A[j])\n    return round_if_float(A[0] * (1 if n % 2 == 0 else -1))\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\ndef stirling_second_kind(n, k):\n    n, k = int(str(abs(n))[0]), int(str(abs(k))[0])\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n or k == 1:\n        return 1\n    return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n\n\nvalue_1 = 9\nvalue_2 = 6\n\nresult = value_1\n\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nresult = euler_number(result if int(abs(result)) not in [0, 1] else value_1)\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nresult = stirling_second_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nprint(result)\n",
        "Local run output": "31",
        "Chat GPT 3.5-turbo output": "35.0",
        "Llama 3.1-70B Ins output": "1",
        "Chat GPT 4o output": "1",
        "Liczba funkcji ": 4,
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Chat GPT 4o correctness": false
    },
    {
        "Date and Time": "2024-11-24T17:51:25.654677",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef absolute_value(number):\n    return abs(number)\n\n\ndef nth_fibonacci(n):\n    if n <= 0:\n        return \"Enter a number greater than 0.\"\n    elif n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\ndef pi_nilakantha(terms=100000):\n    terms = abs(int(terms))\n\n    first_digit = int(str(terms)[0])\n\n    terms = first_digit\n\n    pi_approx = 3.0  \n    for k in range(1, terms + 1):\n        term = 4 / (2 * k * (2 * k + 1) * (2 * k + 2))\n        pi_approx += term if k % 2 == 1 else -term  # Naprzemienne dodawanie/odejmowanie\n    return round_if_float(pi_approx) \nvalue_1 = 2\nvalue_2 = 9\n\nresult = value_1\n\nresult = absolute_value(result if int(abs(result)) not in [0, 1] else value_1)\nresult = nth_fibonacci(result if int(abs(result)) not in [0, 1] else value_1)\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nresult = pi_nilakantha(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "3.167",
        "Chat GPT 3.5-turbo output": "3.141",
        "Llama 3.1-70B Ins output": "3.283",
        "Chat GPT 4o output": "3.2",
        "Liczba funkcji ": 4,
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Chat GPT 4o correctness": false
    },
    {
        "Date and Time": "2024-11-24T17:51:30.500688",
        "Program code": "import math\n\n\ndef round_if_float(value):\n    if isinstance(value, float):\n        return round(value, 3)\n    return value\n\n\ndef euler_polynomial(n, x):\n    n, x = int(str(abs(n))[0]), int(str(abs(x))[0])\n    if n > x:\n        x = n\n        x1 = n\n        n = x1\n    E = [1] * (n + 1)\n    for k in range(1, n + 1):\n        E[k] = E[k - 1] * (x - (k - 1))\n    return E[-1]\n\n\ndef stirling_first_kind(n, k):\n    n, k = int(abs(n)), int(abs(k))\n    if k > n or k == 0:\n        k, n = n, k\n    if k == n:\n        return 1\n    if k == 1:\n        return math.factorial(n - 1)\n    return (n - 1) * stirling_first_kind(n - 1, k) + stirling_first_kind(n - 1, k - 1)\n\n\ndef euler_mascheroni(terms=100000):\n    terms = max(1, int(abs(terms)))\n    gamma = 0.0\n    for k in range(1, terms + 1):\n        gamma += (1 / k) - math.log((k + 1) / k)\n    return round_if_float(gamma)\n\n\ndef ln2_taylor(terms=1000):\n    terms = max(1, int(abs(terms)))\n    return round_if_float(sum((-1)**(n + 1) / n for n in range(1, terms + 1)))\n\n\nvalue_1 = 2\nvalue_2 = 1\n\nresult = value_1\n\nresult = euler_polynomial(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nresult = stirling_first_kind(result if int(abs(result)) not in [0, 1] else value_1, value_2)\nresult = euler_mascheroni(result if int(abs(result)) not in [0, 1] else value_1)\nresult = ln2_taylor(result if int(abs(result)) not in [0, 1] else value_1)\nprint(result)\n",
        "Local run output": "0.5",
        "Chat GPT 3.5-turbo output": "-0.693",
        "Llama 3.1-70B Ins output": "0.693",
        "Chat GPT 4o output": "0.693",
        "Liczba funkcji ": 4,
        "Chat GPT 3.5-Turbo correctness": false,
        "Llama 3.1-70B Ins correctness": false,
        "Chat GPT 4o correctness": false
    }
]